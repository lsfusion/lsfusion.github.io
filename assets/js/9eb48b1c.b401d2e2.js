"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[12449],{92538:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=t(74848),i=t(28453);const a={title:"Simple event"},r=void 0,o={id:"Simple_event",title:"Simple event",description:"Simple event - an event that occurs when the value of the specified property (which shall be called an event condition) changes to non-NULL. This event is a kind of extension of a basic event (adding an additional condition), which means that all the same parameters must be set as for an basic event, in particular:",source:"@site/versioned_docs/version-v5/Simple_event.md",sourceDirName:".",slug:"/Simple_event",permalink:"/Simple_event",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v5/docs/en/Simple_event.md",tags:[],version:"v5",lastUpdatedAt:1685108136,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{title:"Simple event"},sidebar:"learn",previous:{title:"Events",permalink:"/Events"},next:{title:"Calculated events",permalink:"/Calculated_events"}},l={},c=[{value:"Language",id:"language",level:3},{value:"Examples",id:"examples",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Simple"})," event - an ",(0,s.jsx)(n.a,{href:"/Events",children:"event"})," that occurs when the value of the specified ",(0,s.jsx)(n.a,{href:"/Properties",children:"property"})," (which shall be called an event ",(0,s.jsx)(n.em,{children:"condition"}),") changes to non-",(0,s.jsx)(n.code,{children:"NULL"}),". This event is a kind of extension of a basic event (adding an additional condition), which means that all the same parameters must be set as for an basic event, in particular:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["event ",(0,s.jsx)(n.a,{href:"/Events#type",children:"type"}),", which determines the point in time when this simple event will occur (including checking the condition)."]}),"\n",(0,s.jsxs)(n.li,{children:["event ",(0,s.jsx)(n.a,{href:"/Events",children:"handler"})," - an ",(0,s.jsx)(n.a,{href:"/Actions",children:"action"})," to be executed upon the occurrence of this simple event"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Compared to a basic event, a simple event just wraps its handling in a ",(0,s.jsx)(n.a,{href:"/Loop_FOR",children:"loop"})," operator whose condition is an event condition. However, simple events have a number of important additional features:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If the condition does not contain the ",(0,s.jsxs)(n.a,{href:"/Previous_value_PREV",children:["previous value operator (",(0,s.jsx)(n.code,{children:"PREV"}),")"]}),", the platform itself wraps the specified condition in a ",(0,s.jsxs)(n.a,{href:"/Change_operators_SET_CHANGED_etc",children:["change operator (",(0,s.jsx)(n.code,{children:"SET"}),")"]}),". This significantly reduces the risk of creating incorrect handling (which will have consequences if the change session is empty)"]}),"\n",(0,s.jsx)(n.li,{children:"Such events are more understandable and readable, as they reflect the classic cause-effect relationship (when one thing occurs, another is done)"}),"\n",(0,s.jsxs)(n.li,{children:['For these events there is the possibility of "recalculation" - that is, executing handlers in a mode where all previous values are ',(0,s.jsx)(n.code,{children:"NULL"})," (as if the database were empty). This is useful when an event is created for an existing database, and the old data must also follow the logic of this event."]}),"\n",(0,s.jsxs)(n.li,{children:["If the action in a simple event is a single ",(0,s.jsx)(n.a,{href:"/Property_change_CHANGE",children:"change"})," of a given property, this event is easily made ",(0,s.jsx)(n.a,{href:"/Calculated_events",children:"calculated"})," and vice versa."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"language",children:"Language"}),"\n",(0,s.jsxs)(n.p,{children:["To create simple events, use the ",(0,s.jsxs)(n.a,{href:"/WHEN_statement",children:[(0,s.jsx)(n.code,{children:"WHEN"})," statement"]}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lsf",children:"CLASS Stock;\r\nname = DATA STRING[50] (Stock);\r\n\r\nbalance = DATA INTEGER (Sku, Stock);\r\n\r\n// send an email when the balance is less than 0 as a result of applying session changes\r\nWHEN balance(Sku s, Stock st) < 0 DO\r\n      EMAIL SUBJECT 'The balance has become negative for the item ' + name(s) + ' in the warehouse ' + name(st);\r\n\r\nCLASS OrderDetail;\r\norder = DATA Order (OrderDetail) NONULL DELETE;\r\ndiscount = DATA NUMERIC[6,2] (OrderDetail);\r\n\r\nWHEN LOCAL CHANGED(customer(Order o)) AND name(customer(o)) == 'Best customer' DO\r\n    discount(OrderDetail d) <- 50 WHERE order(d) == o;\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);