(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[85193],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return u},kt:function(){return k}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),p=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,s=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),m=p(n),k=a,c=m["".concat(s,".").concat(k)]||m[k]||d[k]||l;return n?r.createElement(c,o(o({ref:e},u),{},{components:n})):r.createElement(c,o({ref:e},u))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41471:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var r=n(22122),a=n(19756),l=(n(67294),n(3905)),o={title:"String operators (+, CONCAT, SUBSTRING)"},i={unversionedId:"String_operators_+_CONCAT_SUBSTRING_",id:"String_operators_+_CONCAT_SUBSTRING_",isDocsHomePage:!1,title:"String operators (+, CONCAT, SUBSTRING)",description:"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:",source:"@site/docs/String_operators_+_CONCAT_SUBSTRING_.md",sourceDirName:".",slug:"/String_operators_+_CONCAT_SUBSTRING_",permalink:"/next/String_operators_+_CONCAT_SUBSTRING_",editUrl:"https://github.com/danchanka/platform/edit/master/docs/en/String_operators_+_CONCAT_SUBSTRING_.md",version:"current",lastUpdatedAt:1617631212,formattedLastUpdatedAt:"4/5/2021",frontMatter:{title:"String operators (+, CONCAT, SUBSTRING)"},sidebar:"learn",previous:{title:"Extremum (MAX, MIN)",permalink:"/next/Extremum_MAX_MIN_"},next:{title:"Structure operations (STRUCT, [])",permalink:"/next/Structure_operations_STRUCT_"}},s=[{value:"Determining the result class",id:"determining-the-result-class",children:[]},{value:"Examples",id:"examples",children:[]}],p={toc:s};function u(t){var e=t.components,n=(0,a.Z)(t,["components"]);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Operator",(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Name",(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Description",(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Example",(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Result",(0,l.kt)("br",null)),(0,l.kt)("br",null))))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"+, ",(0,l.kt)("strong",null,(0,l.kt)("a",{parentName:"td",href:"/next/CONCAT_operator"},"CONCAT")))),(0,l.kt)("td",{parentName:"tr",align:null},"Concatenation"),(0,l.kt)("td",{parentName:"tr",align:null},"Takes two operands and returns a string obtained by concatenating the strings specified in the operands"),(0,l.kt)("td",{parentName:"tr",align:null},"'a' + 'b'"),(0,l.kt)("td",{parentName:"tr",align:null},"'ab'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"SUBSTRING")),(0,l.kt)("td",{parentName:"tr",align:null},"Substring"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("p",null,"Takes three operands and\xa0returns a substring obtained from the string specified in the first operand, starting with the character specified in the second operand, and having length specified in the third operand")),(0,l.kt)("td",{parentName:"tr",align:null},"SUBSTRING('abc', 2, 2)"),(0,l.kt)("td",{parentName:"tr",align:null},"'bc'")))),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"+")," and ",(0,l.kt)("strong",{parentName:"p"},"SUBSTRING")," operators return ",(0,l.kt)("strong",{parentName:"p"},"NULL")," if one of the operands is ",(0,l.kt)("strong",{parentName:"p"},"NULL"),".\xa0The ",(0,l.kt)("strong",{parentName:"p"},"CONCAT"),"\xa0operator treats\xa0",(0,l.kt)("strong",{parentName:"p"},"NULL"),"\xa0value of the operand as an empty string (however, concatenation of two ",(0,l.kt)("strong",{parentName:"p"},"NULL")," values still returns ",(0,l.kt)("strong",{parentName:"p"},"NULL"),"). Also, in the ",(0,l.kt)("strong",{parentName:"p"},"CONCAT")," operator you can optionally specify the third operand (",(0,l.kt)("em",{parentName:"p"},"delimiter"),") which will be inserted if and only if both operands are not ",(0,l.kt)("strong",{parentName:"p"},"NULL"),". For example, CONCAT ' ', 'John', 'Smith' = 'John Smith', but CONCAT ' ', 'John', NULL = 'John'."),(0,l.kt)("h3",{id:"determining-the-result-class"},"Determining the result class"),(0,l.kt)("p",null,"The result class is defined as:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operator"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"+"),", ",(0,l.kt)("strong",null,"CONCAT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("pre",null,(0,l.kt)("code",null,"result = STRING","[p1.blankPadded AND p2.blankPadded, p1.caseInsensitive OR p2.caseInsensitive, p1.length + p2.length]")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"SUBSTRING(p, from, length)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("pre",null,(0,l.kt)("code",null,"result = STRING","[p.blankPadded, p.caseInsensitive, length]")))))),(0,l.kt)("p",null,"where ",(0,l.kt)("em",{parentName:"p"},"blankPadded"),",\xa0",(0,l.kt)("em",{parentName:"p"},"caseInsensitive"),"\xa0and\xa0",(0,l.kt)("em",{parentName:"p"},"length")," are determined similarly to the rules for construction of a common ancestor\xa0for two\xa0built-in classes (Strings family)."),(0,l.kt)("p",null,"In the + operator, operands which classes are other than string are cast to strings in accordance with the following table:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Class"),(0,l.kt)("th",{parentName:"tr",align:null},"Cast class"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("p",null,(0,l.kt)("strong",null,"DATE"),", ",(0,l.kt)("strong",null,"DATETIME"),", ",(0,l.kt)("strong",null,"TIME"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"STRING","[25]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"NUMERIC")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"STRING","[p.length]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"LOGICAL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"STRING","[1]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"FILE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"TEXT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/next/User_classes"},"Object")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"STRING","[10]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Other"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",null,"STRING","[8]"))))),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Person;\nfirstName = DATA STRING[100] (Person);\nmiddleName = DATA STRING[100] (Person);\nlastName = DATA STRING[100] (Person);\n\nfullName(Person p) = CONCAT ' ', firstName(p), middleName(p), lastName(p);     // if some part of the name is not specified, then this part will be skipped along with a space\n")))}u.isMDXComponent=!0}}]);