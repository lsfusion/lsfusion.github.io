"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([["92890"],{19051:function(e,n,t){t.r(n),t.d(n,{default:()=>N,frontMatter:()=>c,metadata:()=>r,assets:()=>a,toc:()=>l,contentTitle:()=>i});var r=JSON.parse('{"id":"NEWCONNECTION_operator","title":"NEWCONNECTION operator","description":"The NEWCONNECTION operator creates an action that executes another action with preserving SQL, TCP, DBF connections.","source":"@site/docs/NEWCONNECTION_operator.md","sourceDirName":".","slug":"/NEWCONNECTION_operator","permalink":"/NEWCONNECTION_operator","draft":false,"unlisted":false,"editUrl":"https://github.com/lsfusion/platform/edit/master/docs/en/NEWCONNECTION_operator.md","tags":[],"version":"current","lastUpdatedAt":1736502893000,"frontMatter":{"title":"NEWCONNECTION operator"},"sidebar":"learn","previous":{"title":"NESTEDSESSION operator","permalink":"/NESTEDSESSION_operator"},"next":{"title":"NEWEXECUTOR operator","permalink":"/NEWEXECUTOR_operator"}}'),o=t("85893"),s=t("50065");let c={title:"NEWCONNECTION operator"},i=void 0,a={},l=[{value:"Syntax",id:"syntax",level:3},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function d(e){let n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"NEWCONNECTION"})," operator creates an ",(0,o.jsx)(n.a,{href:"/Actions",children:"action"})," that executes another action with preserving SQL, TCP, DBF connections."]}),"\n",(0,o.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"NEWCONNECTION action\n"})}),"\n",(0,o.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"NEWCONNECTION"})," operator creates an action that preserves SQL, TCP, and DBF connections, allowing the execution of ",(0,o.jsx)(n.code,{children:"EXTERNAL SQL"}),", ",(0,o.jsx)(n.code,{children:"EXTERNAL TCP"}),", and ",(0,o.jsx)(n.code,{children:"EXTERNAL DBF"})," without the need to establish a new connection each time. All connections are closed at the end of the NEWCONNECTION operator's execution."]}),"\n",(0,o.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"action"})}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.a,{href:"/Action_operators#contextdependent",children:"context dependent operator"})," that defines an action to be executed."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lsf",children:"test {\n    NEWCONNECTION {\n        EXTERNAL SQL 'jdbc:postgresql://connection/string' EXEC 'first query'; // The first EXTERNAL creates a connection and does not close it        \n        EXTERNAL SQL 'jdbc:postgresql://connection/string' EXEC 'second query'; // The second EXTERNAL uses the already established connection\n    }\n    // All created connections are closed at the end of NEWCONNECTION execution, regardless of whether there were errors during the execution\n}\n"})})]})}function N(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return c}});var r=t(67294);let o={},s=r.createContext(o);function c(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);