"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[10737],{75635:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var r=o(74848),t=o(28453);const a={title:"How-to: Metaprogramming"},s=void 0,i={id:"How-to_Metaprogramming",title:"How-to: Metaprogramming",description:'You may often need to write "similar" code for certain cases. The META statement exists for this purpose, and makes it possible to create a code template or metacode. It can contain parameters that will be replaced by certain values when this metacode is used. Such an approach is called metaprogramming.',source:"@site/versioned_docs/version-v4/How-to_Metaprogramming.md",sourceDirName:".",slug:"/How-to_Metaprogramming",permalink:"/v4/How-to_Metaprogramming",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v4/docs/en/How-to_Metaprogramming.md",tags:[],version:"v4",lastUpdatedAt:1623249583,formattedLastUpdatedAt:"Jun 9, 2021",frontMatter:{title:"How-to: Metaprogramming"},sidebar:"learn",previous:{title:"How-to: Binding properties",permalink:"/v4/How-to_Binding_properties"},next:{title:"How-to: Physical model",permalink:"/v4/How-to_Physical_model"}},c={},d=[];function l(e){const n={a:"a",code:"code",em:"em",img:"img",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:['You may often need to write "similar" code for certain cases. The ',(0,r.jsxs)(n.a,{href:"/v4/META_statement",children:[(0,r.jsx)(n.code,{children:"META"})," statement"]})," exists for this purpose, and makes it possible to create a code template or ",(0,r.jsx)(n.em,{children:"metacode"}),". It can contain parameters that will be replaced by certain values when this metacode is used. Such an approach is called ",(0,r.jsx)(n.a,{href:"/v4/Metaprogramming",children:"metaprogramming"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's create a simple directory as described in the article. ",(0,r.jsx)(n.a,{href:"/v4/How-to_CRUD",children:"How-to: CRUD"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lsf",children:"CLASS Book 'Book';\r\nname 'Name' = DATA ISTRING[30] (Book) IN id;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lsf",children:"FORM book 'Book' // form for displaying \"card' // form for displaying the book card\r\n    OBJECTS b = Book PANEL\r\n    PROPERTIES(b) name\r\n\r\n    EDIT Book OBJECT b\r\n;\r\n\r\nFORM books 'Books'\r\n    OBJECTS b = Book\r\n    PROPERTIES(b) READONLY name\r\n    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE\r\n\r\n    LIST Book OBJECT b\r\n;\r\n\r\nNAVIGATOR {\r\n    NEW books;\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"We can use this code to write the following metacode:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lsf",children:"META defineObject(class, id, shortId, caption, multiCaption)\r\n    CLASS class caption;\r\n    TABLE id(class);\r\n\r\n    name 'Name' = DATA ISTRING[100] (class);\r\n\r\n    FORM id caption\r\n        OBJECTS shortId = class PANEL\r\n        PROPERTIES(shortId) name\r\n\r\n        EDIT class OBJECT shortId\r\n    ;\r\n\r\n    FORM id##s multiCaption\r\n        OBJECTS shortId = class\r\n        PROPERTIES(shortId) READONLY name\r\n        PROPERTIES(shortId) NEWSESSION NEW, EDIT, DELETE\r\n\r\n        LIST class OBJECT shortId\r\n    ;\r\n\r\n    NAVIGATOR {\r\n        NEW id##s;\r\n    }\r\nEND\r\n\r\nMETA defineObject(id, shortId, caption, multiCaption)\r\n    @defineObject(###id, id, shortId, caption, multiCaption);\r\nEND\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note that one code segment can programmatically call another one."}),"\n",(0,r.jsx)(n.p,{children:"This is how metacode is used:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lsf",children:"@defineObject(book, b, 'Book', 'Books');\r\n@defineObject(magazine, m, 'Magazine', 'Magazines');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the first case, when the system starts generating the result code, it will replace all ",(0,r.jsx)(n.code,{children:"id"})," lexemes with ",(0,r.jsx)(n.code,{children:"book"}),", ",(0,r.jsx)(n.code,{children:"shortId"})," with ",(0,r.jsx)(n.code,{children:"b"}),", ",(0,r.jsx)(n.code,{children:"caption"})," with ",(0,r.jsx)(n.code,{children:"'Book'"}),", and ",(0,r.jsx)(n.code,{children:"multiCaption"})," with ",(0,r.jsx)(n.code,{children:"'Books'"}),". When using ",(0,r.jsx)(n.code,{children:"##"})," concatenation, these replacements will leave everything unchanged. If ",(0,r.jsx)(n.code,{children:"###"})," concatenation is used, the first letter of the value will be capitalized. The generated code will look like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lsf",children:"CLASS Book 'Book';\r\nTABLE book(Book);\r\n\r\nname 'Name' = DATA ISTRING[100] (Book);\r\n\r\nFORM book 'Book'\r\n    OBJECTS b = Book PANEL\r\n    PROPERTIES(b) name\r\n\r\n    EDIT Book OBJECT b\r\n;\r\n\r\nFORM books 'Books'\r\n    OBJECTS b = Book\r\n    PROPERTIES(b) READONLY name\r\n    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE\r\n\r\n    LIST Book OBJECT b\r\n;\r\n\r\nNAVIGATOR {\r\n    NEW books;\r\n}\r\n\r\nCLASS Magazine 'Magazine';\r\nTABLE magazine(Magazine);\r\n\r\nname 'Name' = DATA ISTRING[100] (Magazine);\r\n\r\nFORM magazine 'Magazine'\r\n    OBJECTS m = Magazine PANEL\r\n    PROPERTIES(m) name\r\n\r\n    EDIT Magazine OBJECT m\r\n;\r\n\r\nFORM magazines 'Magazines'\r\n    OBJECTS m = Magazine\r\n    PROPERTIES(m) READONLY name\r\n    PROPERTIES(m) NEWSESSION NEW, EDIT, DELETE\r\n\r\n    LIST Magazine OBJECT m\r\n;\r\n\r\nNAVIGATOR {\r\n    NEW magazines;\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'In order for the IDE to "see" the code generated by metacodes, you need to enabled the corresponding mode in the menu.'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(41723).A+"",width:"299",height:"472"})}),"\n",(0,r.jsx)(n.p,{children:"When the metacode support mode is enabled, the generated code will be automatically substituted in the source code if metacode is used."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(14048).A+"",width:"434",height:"408"})}),"\n",(0,r.jsx)(n.p,{children:"Any modifications of the code will be impossible, since they will be automatically overwritten by the IDE. However, it is recommended to disable this mode when committing code to your version control system to avoid creating redundant change history entries."}),"\n",(0,r.jsxs)(n.p,{children:["Objects created using metacode can subsequently be extended using standard ",(0,r.jsx)(n.a,{href:"/v4/How-to_Extensions",children:"mechanisms"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lsf",children:"genre 'Genre' = DATA ISTRING[20] (Book);\r\nEXTEND FORM book PROPERTIES(b) genre;\r\nEXTEND FORM books PROPERTIES(b) genre;\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},41723:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/How-to_Metaprogramming_enable-b3aa414b76e300a02263fb015ce78aa0.png"},14048:(e,n,o)=>{o.d(n,{A:()=>r});const r=o.p+"assets/images/How-to_Metaprogramming_metaMode-e565f6f9b0256e990ac2c3d17aeafd17.png"},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var r=o(96540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);