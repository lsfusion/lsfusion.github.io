"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[42532],{56794:(r,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>t,default:()=>a,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var i=s(74848),n=s(28453);const o={title:"Operator priority"},t=void 0,d={id:"Operator_priority",title:"Operator priority",description:"When evaluating an expression, operators are evaluated in a specific order depending on operator priority. The higher the operator\u2019s priority, the earlier it will be executed. The table below lists the priorities of all operators in descending order.",source:"@site/versioned_docs/version-v5/Operator_priority.md",sourceDirName:".",slug:"/Operator_priority",permalink:"/v5/Operator_priority",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v5/docs/en/Operator_priority.md",tags:[],version:"v5",lastUpdatedAt:1720706674e3,frontMatter:{title:"Operator priority"},sidebar:"learn",previous:{title:"Expression",permalink:"/v5/Expression"},next:{title:"Property operators",permalink:"/v5/Property_operators"}},c={},h=[];function x(r){const e={a:"a",code:"code",em:"em",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["When evaluating an ",(0,i.jsx)(e.a,{href:"/v5/Expression",children:"expression"}),", ",(0,i.jsx)(e.a,{href:"/v5/Property_operators_paradigm",children:"operators"})," are evaluated in a specific order depending on ",(0,i.jsx)(e.em,{children:"operator priority"}),". The higher the operator\u2019s priority, the earlier it will be executed. The table below lists the priorities of all operators in descending order."]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Operator"}),(0,i.jsx)(e.th,{children:"Description"}),(0,i.jsx)(e.th,{children:"Type"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:"(expression)"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/JOIN_operator",children:(0,i.jsx)(e.code,{children:"JOIN"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/CASE_operator",children:(0,i.jsx)(e.code,{children:"CASE"})}),", ",(0,i.jsx)(e.a,{href:"/v5/MULTI_operator",children:(0,i.jsx)(e.code,{children:"MULTI"})}),", ",(0,i.jsx)(e.a,{href:"/v5/OVERRIDE_operator",children:(0,i.jsx)(e.code,{children:"OVERRIDE"})}),", ",(0,i.jsx)(e.a,{href:"/v5/EXCLUSIVE_operator",children:(0,i.jsx)(e.code,{children:"EXCLUSIVE"})}),", ",(0,i.jsx)(e.a,{href:"/v5/IF_..._THEN_operator",children:(0,i.jsx)(e.code,{children:"IF ... THEN"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/PARTITION_operator",children:(0,i.jsx)(e.code,{children:"PARTITION"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/RECURSION_operator",children:(0,i.jsx)(e.code,{children:"RECURSION"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/GROUP_operator",children:(0,i.jsx)(e.code,{children:"GROUP"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/STRUCT_operator",children:(0,i.jsx)(e.code,{children:"STRUCT"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/MAX_operator",children:(0,i.jsx)(e.code,{children:"MAX"})}),"/",(0,i.jsx)(e.a,{href:"/v5/MIN_operator",children:(0,i.jsx)(e.code,{children:"MIN"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/ROUND_operator",children:(0,i.jsx)(e.code,{children:"ROUND"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/CONCAT_operator",children:(0,i.jsx)(e.code,{children:"CONCAT"})}),(0,i.jsx)("br",{}),(0,i.jsxs)(e.a,{href:"/v5/Type_conversion_operator",children:[(0,i.jsx)(e.code,{children:"INTEGER"}),", ",(0,i.jsx)(e.code,{children:"DOUBLE"}),"..."]}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/PREV_operator",children:(0,i.jsx)(e.code,{children:"PREV"})}),", ",(0,i.jsxs)(e.a,{href:"/v5/Change_operators",children:[(0,i.jsx)(e.code,{children:"CHANGED"}),", ..."]}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/CLASS_operator",children:(0,i.jsx)(e.code,{children:"ISCLASS"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/ACTIVE_TAB_operator",children:(0,i.jsx)(e.code,{children:"ACTIVE"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Literals",children:(0,i.jsx)(e.code,{children:"literal"})})]}),(0,i.jsxs)(e.td,{children:["Expression in parentheses",(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Composition_JOIN",children:"Composition"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Selection_CASE_IF_MULTI_OVERRIDE_EXCLUSIVE",children:"Selection"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Partitioning_sorting_PARTITION_..._ORDER",children:"Partition/order"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Recursion_RECURSION",children:"Recursion"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Grouping_GROUP",children:"Group"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Structure_operators_STRUCT",children:"Structure creation"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Extremum_MAX_MIN",children:"Maximum/minimum"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Rounding_operator_ROUND",children:"Rounding"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/String_operators_+_CONCAT_SUBSTRING",children:"String concatenation"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Type_conversion",children:"Type conversion"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Previous_value_PREV",children:"Previous value"}),", ",(0,i.jsx)(e.a,{href:"/v5/Change_operators_SET_CHANGED_etc",children:"Change operators"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Property_signature_CLASS",children:"Signature matching"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Activity_ACTIVE",children:"Activity"}),(0,i.jsx)("br",{})," ",(0,i.jsx)(e.a,{href:"/v5/Constant",children:"Constants"})]}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),"Prefix",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:"/v5/Brackets_operator",children:(0,i.jsx)(e.code,{children:"[ ]"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/IS_AS_operators",children:(0,i.jsx)(e.code,{children:"IS"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/IS_AS_operators",children:(0,i.jsx)(e.code,{children:"AS"})})]}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:"/v5/Structure_operators_STRUCT",children:"Structure element access"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Classification_IS_AS",children:"Classification"}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Classification_IS_AS",children:"Classification"})]}),(0,i.jsxs)(e.td,{children:["Postfix",(0,i.jsx)("br",{}),"Postfix",(0,i.jsx)("br",{}),"Postfix"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/Arithmetic_operators",children:(0,i.jsx)(e.code,{children:"-"})})}),(0,i.jsx)(e.td,{children:"Unary minus"}),(0,i.jsx)(e.td,{children:"Prefix"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:"/v5/Arithmetic_operators",children:(0,i.jsx)(e.code,{children:"*"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Arithmetic_operators",children:(0,i.jsx)(e.code,{children:"/"})})]}),(0,i.jsxs)(e.td,{children:["Multiplication",(0,i.jsx)("br",{}),"Division"]}),(0,i.jsxs)(e.td,{children:["Binary",(0,i.jsx)("br",{}),"Binary"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:"/v5/Arithmetic_operators",children:(0,i.jsx)(e.code,{children:"+"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Arithmetic_operators",children:(0,i.jsx)(e.code,{children:"-"})})]}),(0,i.jsxs)(e.td,{children:["Addition",(0,i.jsx)("br",{}),"Subtraction"]}),(0,i.jsxs)(e.td,{children:["Binary",(0,i.jsx)("br",{}),"Binary"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:"/v5/Arithmetic_operators",children:(0,i.jsx)(e.code,{children:"(+)"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Arithmetic_operators",children:(0,i.jsx)(e.code,{children:"(-)"})})]}),(0,i.jsxs)(e.td,{children:["Addition with ",(0,i.jsx)(e.code,{children:"NULL"})," values",(0,i.jsx)("br",{}),"Subtraction with ",(0,i.jsx)(e.code,{children:"NULL"})," values"]}),(0,i.jsxs)(e.td,{children:["Binary",(0,i.jsx)("br",{}),"Binary"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/LIKE_operator",children:(0,i.jsx)(e.code,{children:"LIKE"})})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/Comparison_operators_=_etc",children:"Comparison with a pattern"})}),(0,i.jsx)(e.td,{children:"Binary"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:"/v5/Comparison_operators",children:(0,i.jsx)(e.code,{children:"<"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Comparison_operators",children:(0,i.jsx)(e.code,{children:"<="})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Comparison_operators",children:(0,i.jsx)(e.code,{children:">"})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Comparison_operators",children:(0,i.jsx)(e.code,{children:">="})})]}),(0,i.jsxs)(e.td,{children:["Less",(0,i.jsx)("br",{}),"Less or equal",(0,i.jsx)("br",{}),"Greater",(0,i.jsx)("br",{}),"Greater or equal"]}),(0,i.jsxs)(e.td,{children:["Binary",(0,i.jsx)("br",{}),"Binary",(0,i.jsx)("br",{}),"Binary",(0,i.jsx)("br",{}),"Binary"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:"/v5/Comparison_operators",children:(0,i.jsx)(e.code,{children:"=="})}),(0,i.jsx)("br",{}),(0,i.jsx)(e.a,{href:"/v5/Comparison_operators",children:(0,i.jsx)(e.code,{children:"!="})})]}),(0,i.jsxs)(e.td,{children:["Equal",(0,i.jsx)("br",{}),"Not equal"]}),(0,i.jsxs)(e.td,{children:["Binary",(0,i.jsx)("br",{}),"Binary"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/AND_OR_NOT_XOR_operators",children:(0,i.jsx)(e.code,{children:"NOT"})})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/Logical_operators_AND_OR_NOT_XOR",children:"Logical negation"})}),(0,i.jsx)(e.td,{children:"Prefix"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/AND_OR_NOT_XOR_operators",children:(0,i.jsx)(e.code,{children:"AND"})})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/Logical_operators_AND_OR_NOT_XOR",children:"Logical AND"})}),(0,i.jsx)(e.td,{children:"Binary"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/AND_OR_NOT_XOR_operators",children:(0,i.jsx)(e.code,{children:"XOR"})})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/Logical_operators_AND_OR_NOT_XOR",children:"Logical exclusive OR"})}),(0,i.jsx)(e.td,{children:"Binary"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/AND_OR_NOT_XOR_operators",children:(0,i.jsx)(e.code,{children:"OR"})})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/Logical_operators_AND_OR_NOT_XOR",children:"Logical OR"})}),(0,i.jsx)(e.td,{children:"Binary"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/IF_operator",children:(0,i.jsx)(e.code,{children:"IF"})})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:"/v5/Selection_CASE_IF_MULTI_OVERRIDE_EXCLUSIVE#single",children:"Condition"})}),(0,i.jsx)(e.td,{children:"Binary"})]})]})]})]})}function a(r={}){const{wrapper:e}={...(0,n.R)(),...r.components};return e?(0,i.jsx)(e,{...r,children:(0,i.jsx)(x,{...r})}):x(r)}},28453:(r,e,s)=>{s.d(e,{R:()=>t,x:()=>d});var i=s(96540);const n={},o=i.createContext(n);function t(r){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function d(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(n):r.components||n:t(r.components),i.createElement(o.Provider,{value:e},r.children)}}}]);