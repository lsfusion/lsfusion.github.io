(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[79630],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,h=p["".concat(c,".").concat(m)]||p[m]||s[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},31904:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(22122),o=n(19756),a=(n(67294),n(3905)),i={title:"How-to: PARTITION"},l={unversionedId:"How-to_PARTITION",id:"How-to_PARTITION",isDocsHomePage:!1,title:"How-to: PARTITION",description:"Example 1",source:"@site/docs/How-to_PARTITION.md",sourceDirName:".",slug:"/How-to_PARTITION",permalink:"/next/How-to_PARTITION",editUrl:"https://github.com/danchanka/platform/edit/master/docs/en/How-to_PARTITION.md",version:"current",lastUpdatedAt:1617631212,formattedLastUpdatedAt:"4/5/2021",frontMatter:{title:"How-to: PARTITION"},sidebar:"learn",previous:{title:"How-to: GROUP CONCAT",permalink:"/next/How-to_GROUP_CONCAT"},next:{title:"How-to: GUI",permalink:"/next/How-to_GUI"}},c=[{value:"Example 1",id:"example-1",children:[{value:"Condition",id:"condition",children:[]},{value:"Solution",id:"solution",children:[]}]},{value:"Example 2",id:"example-2",children:[{value:"Condition",id:"condition-1",children:[]},{value:"Solution",id:"solution-1",children:[]}]},{value:"Example 3",id:"example-3",children:[{value:"Condition",id:"condition-2",children:[]},{value:"Solution",id:"solution-2",children:[]}]}],d={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("h3",{id:"condition"},"Condition"),(0,a.kt)("p",null,"We have an order with the lines."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Order 'Order';\nCLASS OrderDetail 'Order line';\n\norder 'Order' = DATA Order (OrderDetail) NONULL DELETE;\n")),(0,a.kt)("p",null,"We need to number the lines starting from 1 as they are added to the order."),(0,a.kt)("h3",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"index 'Line number' (OrderDetail d) = PARTITION SUM 1 ORDER d BY order(d) CHARWIDTH 4;\n")),(0,a.kt)("p",null,"In this case, we sort by internal ID of lines in the order, since we know for sure that this ID increases when the new lines are created."),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("h3",{id:"condition-1"},"Condition"),(0,a.kt)("p",null,"We have a list of customer orders with specified dates."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"date 'Date' = DATA DATE (Order);\n\nCLASS Customer 'Customer';\ncustomer 'Customer' = DATA Customer (Order);\n")),(0,a.kt)("p",null,"For each order we need to find the date of the previous order placed by the same customer."),(0,a.kt)("h3",{id:"solution-1"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"prevOrderDate 'Previous order' (Order o) = PARTITION PREV date(o) ORDER date(o), o BY customer(o);\n")),(0,a.kt)("p",null,"Similar to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/next/How-to_GROUP_CONCAT"},"How-to: GROUP CONCAT")),", the order should be uniquely determined. Therefore, we add the order itself (i. e. its internal ID) as the last argument for ",(0,a.kt)("strong",{parentName:"p"},"ORDER"),"."),(0,a.kt)("h2",{id:"example-3"},"Example 3"),(0,a.kt)("h3",{id:"condition-2"},"Condition"),(0,a.kt)("p",null,"We have the current balance for books by batches."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Book 'Book';\n\nCLASS Batch 'Batch';\nbook 'Book' = DATA Book (Batch);\ndate 'Arrival date' = DATA DATE (Batch);\n\nCLASS Stock 'Warehouse';\ncurrentBalance 'Balance' = DATA INTEGER (Batch, Stock); // The balance is made data for the example. This is usually a calculated property.\n")),(0,a.kt)("p",null,"We need to distribute the specified quantity for a specified book by batches according to the FIFO principle."),(0,a.kt)("h3",{id:"solution-2"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"quantity = DATA LOCAL INTEGER (Book);\n\nquantityFIFO 'Quantity by FIFO batch' (Batch b, Stock s) = PARTITION UNGROUP quantity\n                                                                    LIMIT STRICT currentBalance(b, s)\n                                                                    ORDER date(b), b\n                                                                    BY book(b);\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"STRICT")," parameter means that if the quantity is greater than the total balance for all batches, then the remaining difference will be added to the last batch."))}u.isMDXComponent=!0}}]);