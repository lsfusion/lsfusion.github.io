(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[83406],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=m(n),c=a,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77787:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return m},default:function(){return d}});var r=n(22122),a=n(19756),i=(n(67294),n(3905)),l={title:"Arithmetic operators (+, -, *, ...)"},o=void 0,p={unversionedId:"Arithmetic_operators_+_-_etc",id:"Arithmetic_operators_+_-_etc",isDocsHomePage:!1,title:"Arithmetic operators (+, -, *, ...)",description:"Arithmetic operators create properties whose value is the result of an arithmetic operation. The arguments of these operators must be properties whose values are instances of number classes . The platform currently supports the following arithmetic operators:",source:"@site/docs/Arithmetic_operators_+_-_etc.md",sourceDirName:".",slug:"/Arithmetic_operators_+_-_etc",permalink:"/next/Arithmetic_operators_+_-_etc",editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/Arithmetic_operators_+_-_etc.md",version:"current",lastUpdatedAt:1623249583,formattedLastUpdatedAt:"6/9/2021",frontMatter:{title:"Arithmetic operators (+, -, *, ...)"},sidebar:"learn",previous:{title:"Overview",permalink:"/next/Operations_with_primitives"},next:{title:"Logical operators (AND, OR, NOT, XOR)",permalink:"/next/Logical_operators_AND_OR_NOT_XOR"}},m=[{value:"Determining the result class",id:"determining-the-result-class",children:[]},{value:"Language",id:"language",children:[]},{value:"Examples",id:"examples",children:[]}],s={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Arithmetic operators")," create ",(0,i.kt)("a",{parentName:"p",href:"/next/Properties"},"properties")," whose value is the result of an arithmetic operation. The arguments of these operators must be properties whose values are instances of ",(0,i.kt)("a",{parentName:"p",href:"/next/Built-in_classes"},"number classes")," . The platform currently supports the following arithmetic operators:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example"),(0,i.kt)("th",{parentName:"tr",align:null},"Result"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"+")),(0,i.kt)("td",{parentName:"tr",align:null},"Summation"),(0,i.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"3 + 5")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"8"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-")),(0,i.kt)("td",{parentName:"tr",align:null},"Difference"),(0,i.kt)("td",{parentName:"tr",align:null},"Accepts two input operands and returns their difference",(0,i.kt)("br",null),"This operator also has a unary form, in which case the first operand is considered equal to ",(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"5 - 3")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"2"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*")),(0,i.kt)("td",{parentName:"tr",align:null},"Multiplication"),(0,i.kt)("td",{parentName:"tr",align:null},"Accepts two input operands and returns their product"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"3 * 5")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"15"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"/")),(0,i.kt)("td",{parentName:"tr",align:null},"Ratio"),(0,i.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their ratio"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"15 / 3")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"5"))))),(0,i.kt)("p",null,"All of these operators return ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," if one of the operands is ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," . It is also possible to use a special form of summation and difference operators with brackets, in which case ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," will be equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),". The reverse is also true for these type of operators: if the result of an operator in such form is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," is returned (e. g., ",(0,i.kt)("inlineCode",{parentName:"p"},"5 (-) 5 = NULL"),"):"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example"),(0,i.kt)("th",{parentName:"tr",align:null},"Result"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"(+)")),(0,i.kt)("td",{parentName:"tr",align:null},"Summation"),(0,i.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum, treating ",(0,i.kt)("inlineCode",{parentName:"td"},"NULL")," as ",(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"3 (+) 5"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"3 (+) NULL")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"8"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"3"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"(-)")),(0,i.kt)("td",{parentName:"tr",align:null},"Difference"),(0,i.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their difference, treating ",(0,i.kt)("inlineCode",{parentName:"td"},"NULL")," as ",(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"5 (-) 3"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"5 (-) NULL"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"5 (-) 5")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"2"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"5"),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"NULL"))))),(0,i.kt)("h3",{id:"determining-the-result-class"},"Determining the result class"),(0,i.kt)("p",null,"The result class is determined as:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Result"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"-")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/next/Built-in_classes#commonparentclass"},"Common ancestor"),' ("Numbers" family)')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"NUMERIC[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.Precision]"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"/")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"NUMERIC[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.IntegerPart]"))))),(0,i.kt)("h3",{id:"language"},"Language"),(0,i.kt)("p",null,"Description ",(0,i.kt)("a",{parentName:"p",href:"/next/Arithmetic_operators"},"of arithmetic operators"),"."),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lsf"},"sum(a, b) = a + b;\ntransform(a, b, c) = -a * (b (+) c);\n")))}d.isMDXComponent=!0}}]);