"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([["67492"],{28759:function(e,r,s){s.r(r),s.d(r,{default:()=>a,frontMatter:()=>d,metadata:()=>t,assets:()=>l,toc:()=>o,contentTitle:()=>c});var t=JSON.parse('{"id":"String_operators_+_CONCAT_SUBSTRING","title":"String operators (+, CONCAT)","description":"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:","source":"@site/docs/String_operators_+_CONCAT_SUBSTRING.md","sourceDirName":".","slug":"/String_operators_+_CONCAT_SUBSTRING","permalink":"/String_operators_+_CONCAT_SUBSTRING","draft":false,"unlisted":false,"editUrl":"https://github.com/lsfusion/platform/edit/master/docs/en/String_operators_+_CONCAT_SUBSTRING.md","tags":[],"version":"current","lastUpdatedAt":1751453950000,"frontMatter":{"title":"String operators (+, CONCAT)"},"sidebar":"learn","previous":{"title":"Extremum (MAX, MIN)","permalink":"/Extremum_MAX_MIN"},"next":{"title":"Structure operators (STRUCT, [])","permalink":"/Structure_operators_STRUCT"}}'),n=s("85893"),i=s("50065");let d={title:"String operators (+, CONCAT)"},c=void 0,l={},o=[{value:"Determining the result class",id:"determining-the-result-class",level:3},{value:"Examples",id:"examples",level:3}];function h(e){let r={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Example"}),(0,n.jsx)(r.th,{children:"Result"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"+"}),",\xa0",(0,n.jsx)(r.a,{href:"/CONCAT_operator",children:(0,n.jsx)(r.code,{children:"CONCAT"})})]}),(0,n.jsx)(r.td,{children:"Concatenation"}),(0,n.jsx)(r.td,{children:"Takes two operands and returns a string obtained by concatenating the strings specified in the operands"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"'a' + 'b'"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"'ab'"})})]})})]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"+"})," operator returns ",(0,n.jsx)(r.code,{children:"NULL"})," if one of the operands is ",(0,n.jsx)(r.code,{children:"NULL"}),". The ",(0,n.jsx)(r.code,{children:"CONCAT"})," operator treats ",(0,n.jsx)(r.code,{children:"NULL"})," value of the operand as an empty string (however, concatenation of two ",(0,n.jsx)(r.code,{children:"NULL"})," values still returns ",(0,n.jsx)(r.code,{children:"NULL"}),"). Also, in the ",(0,n.jsx)(r.code,{children:"CONCAT"})," operator you can optionally specify the third operand (",(0,n.jsx)(r.em,{children:"delimiter"}),") which will be inserted if and only if both operands are not ",(0,n.jsx)(r.code,{children:"NULL"}),". For example, ",(0,n.jsx)(r.code,{children:"CONCAT ' ', 'John', 'Smith'"})," = ",(0,n.jsx)(r.code,{children:"'John Smith'"}),", but ",(0,n.jsx)(r.code,{children:"CONCAT ' ', 'John', NULL"})," = ",(0,n.jsx)(r.code,{children:"'John'"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"determining-the-result-class",children:"Determining the result class"}),"\n",(0,n.jsx)(r.p,{children:"The result class is defined as:"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"+"}),", ",(0,n.jsx)(r.code,{children:"CONCAT"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"result = STRING[p1.blankPadded AND p2.blankPadded, p1.caseInsensitive OR p2.caseInsensitive, p1.length + p2.length]"})})]})})]}),"\n",(0,n.jsxs)(r.p,{children:["where ",(0,n.jsx)(r.code,{children:"blankPadded"}),", ",(0,n.jsx)(r.code,{children:"caseInsensitive"})," and ",(0,n.jsx)(r.code,{children:"length"})," are determined similarly to the rules for construction of a common ancestor for two built-in classes (Strings family)."]}),"\n",(0,n.jsxs)(r.p,{children:["In the ",(0,n.jsx)(r.code,{children:"+"})," operator, operands which classes are other than string are cast to strings in accordance with the following table:"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Class"}),(0,n.jsx)(r.th,{children:"Cast class"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"DATE"}),", ",(0,n.jsx)(r.code,{children:"DATETIME"}),", ",(0,n.jsx)(r.code,{children:"TIME"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[25]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"NUMERIC"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[p.length]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"LOGICAL"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[1]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"FILE"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"TEXT"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/User_classes",children:"Object"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[10]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Other"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[8]"})})]})]})]}),"\n",(0,n.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lsf",children:"CLASS Person;\nfirstName = DATA STRING[100] (Person);\nmiddleName = DATA STRING[100] (Person);\nlastName = DATA STRING[100] (Person);\n\n// if some part of the name is not specified, then this part will be skipped along with a space\nfullName(Person p) = CONCAT ' ', firstName(p), middleName(p), lastName(p);     \n"})})]})}function a(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},50065:function(e,r,s){s.d(r,{Z:function(){return c},a:function(){return d}});var t=s(67294);let n={},i=t.createContext(n);function d(e){let r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);