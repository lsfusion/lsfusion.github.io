"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[83406],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return c}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),u=s(n),c=a,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return n?r.createElement(k,l(l({ref:e},m),{},{components:n})):r.createElement(k,l({ref:e},m))}));function c(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},82141:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return s}});var r=n(83117),a=(n(67294),n(3905));const i={title:"Arithmetic operators (+, -, *, ...)"},l=void 0,o={unversionedId:"Arithmetic_operators_+_-_etc",id:"Arithmetic_operators_+_-_etc",title:"Arithmetic operators (+, -, *, ...)",description:"Arithmetic operators create properties whose value is the result of an arithmetic operation. The arguments of these operators must be properties whose values are instances of number classes . The platform currently supports the following arithmetic operators:",source:"@site/docs/Arithmetic_operators_+_-_etc.md",sourceDirName:".",slug:"/Arithmetic_operators_+_-_etc",permalink:"/next/Arithmetic_operators_+_-_etc",editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/Arithmetic_operators_+_-_etc.md",tags:[],version:"current",lastUpdatedAt:1623249583,formattedLastUpdatedAt:"6/9/2021",frontMatter:{title:"Arithmetic operators (+, -, *, ...)"},sidebar:"learn",previous:{title:"Operations with primitives",permalink:"/next/Operations_with_primitives"},next:{title:"Logical operators (AND, OR, NOT, XOR)",permalink:"/next/Logical_operators_AND_OR_NOT_XOR"}},p={},s=[{value:"Determining the result class",id:"determining-the-result-class",level:3},{value:"Language",id:"language",level:3},{value:"Examples",id:"examples",level:3}],m={toc:s};function d(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Arithmetic operators")," create ",(0,a.kt)("a",{parentName:"p",href:"/next/Properties"},"properties")," whose value is the result of an arithmetic operation. The arguments of these operators must be properties whose values are instances of ",(0,a.kt)("a",{parentName:"p",href:"/next/Built-in_classes"},"number classes")," . The platform currently supports the following arithmetic operators:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"),(0,a.kt)("th",{parentName:"tr",align:null},"Result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"+")),(0,a.kt)("td",{parentName:"tr",align:null},"Summation"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"3 + 5")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"8"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"-")),(0,a.kt)("td",{parentName:"tr",align:null},"Difference"),(0,a.kt)("td",{parentName:"tr",align:null},"Accepts two input operands and returns their difference",(0,a.kt)("br",null),"This operator also has a unary form, in which case the first operand is considered equal to ",(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"5 - 3")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"2"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"*")),(0,a.kt)("td",{parentName:"tr",align:null},"Multiplication"),(0,a.kt)("td",{parentName:"tr",align:null},"Accepts two input operands and returns their product"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"3 * 5")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"15"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/")),(0,a.kt)("td",{parentName:"tr",align:null},"Ratio"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their ratio"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"15 / 3")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"5"))))),(0,a.kt)("p",null,"All of these operators return ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," if one of the operands is ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," . It is also possible to use a special form of summation and difference operators with brackets, in which case ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," will be equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),". The reverse is also true for these type of operators: if the result of an operator in such form is ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," is returned (e. g., ",(0,a.kt)("inlineCode",{parentName:"p"},"5 (-) 5 = NULL"),"):"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"),(0,a.kt)("th",{parentName:"tr",align:null},"Result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(+)")),(0,a.kt)("td",{parentName:"tr",align:null},"Summation"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum, treating ",(0,a.kt)("inlineCode",{parentName:"td"},"NULL")," as ",(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"3 (+) 5"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"3 (+) NULL")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"8"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"3"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(-)")),(0,a.kt)("td",{parentName:"tr",align:null},"Difference"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes two input operands and returns their difference, treating ",(0,a.kt)("inlineCode",{parentName:"td"},"NULL")," as ",(0,a.kt)("inlineCode",{parentName:"td"},"0")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"5 (-) 3"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"5 (-) NULL"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"5 (-) 5")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"2"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"5"),(0,a.kt)("br",null),(0,a.kt)("inlineCode",{parentName:"td"},"NULL"))))),(0,a.kt)("h3",{id:"determining-the-result-class"},"Determining the result class"),(0,a.kt)("p",null,"The result class is determined as:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"+"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"-")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/next/Built-in_classes#commonparentclass"},"Common ancestor"),' ("Numbers" family)')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"*")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"NUMERIC[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.Precision]"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"NUMERIC[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.IntegerPart]"))))),(0,a.kt)("h3",{id:"language"},"Language"),(0,a.kt)("p",null,"Description ",(0,a.kt)("a",{parentName:"p",href:"/next/Arithmetic_operators"},"of arithmetic operators"),"."),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"sum(a, b) = a + b;\ntransform(a, b, c) = -a * (b (+) c);\n")))}d.isMDXComponent=!0}}]);