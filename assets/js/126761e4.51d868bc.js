(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[85026],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return k}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),m=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),N=m(r),k=n,d=N["".concat(l,".").concat(k)]||N[k]||u[k]||o;return r?a.createElement(d,p(p({ref:t},s),{},{components:r})):a.createElement(d,p({ref:t},s))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,p=new Array(o);p[0]=N;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,p[1]=i;for(var m=2;m<o;m++)p[m]=r[m];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}N.displayName="MDXCreateElement"},87782:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var a=r(22122),n=r(19756),o=(r(67294),r(3905)),p={title:"Property operators",sidebar_label:"Overview"},i=void 0,l={unversionedId:"Property_operators",id:"Property_operators",isDocsHomePage:!1,title:"Property operators",description:"Property operator is a syntax construct that describes an operator creating a property.",source:"@site/docs/Property_operators.md",sourceDirName:".",slug:"/Property_operators",permalink:"/next/Property_operators",editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/Property_operators.md",version:"current",lastUpdatedAt:1623249583,formattedLastUpdatedAt:"6/9/2021",frontMatter:{title:"Property operators",sidebar_label:"Overview"},sidebar:"learn",previous:{title:"Operator priority",permalink:"/next/Operator_priority"},next:{title:"Arithmetic operators",permalink:"/next/Arithmetic_operators"}},m=[{value:"Context dependent operators",id:"context-dependent-operators",children:[]},{value:"Context independent operators",id:"contextindependent",children:[]}],s={toc:m};function u(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Property operator")," is a syntax construct that describes an ",(0,o.kt)("a",{parentName:"p",href:"/next/Property_operators_paradigm"},"operator")," creating a ",(0,o.kt)("a",{parentName:"p",href:"/next/Properties"},"property"),". "),(0,o.kt)("p",null,"Property operators can be divided into ",(0,o.kt)("em",{parentName:"p"},"context dependent")," and ",(0,o.kt)("em",{parentName:"p"},"context independent"),"."),(0,o.kt)("h3",{id:"context-dependent-operators"},"Context dependent operators"),(0,o.kt)("p",null,"Context dependent property operators can be part of ",(0,o.kt)("a",{parentName:"p",href:"/next/Expression"},"expressions")," and use common parameters (context). These operators are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/Arithmetic_operators"},"Arithmetic operators")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/Brackets_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"[]")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/ACTIVE_TAB_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"ACTIVE TAB")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/AGGR_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"AGGR")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/CASE_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"CASE")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/CLASS_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"CLASS")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/CONCAT_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"CONCAT")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/EXCLUSIVE_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"EXCLUSIVE")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/IF_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"IF")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/IF_..._THEN_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"IF ... THEN")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/JOIN_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"JOIN")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/MAX_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"MAX")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/MIN_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"MIN")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/MULTI_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"MULTI")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/OVERRIDE_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"OVERRIDE")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/PARTITION_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"PARTITION")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/GROUP_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"GROUP")," operator")," (without ",(0,o.kt)("inlineCode",{parentName:"li"},"BY")," block)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/PREV_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"PREV")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/RECURSION_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"RECURSION")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/STRUCT_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"STRUCT")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/UNGROUP_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"UNGROUP")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/Type_conversion_operator"},"Type conversion operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/AND_OR_NOT_XOR_operators"},(0,o.kt)("inlineCode",{parentName:"a"},"AND"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"OR"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"NOT"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"XOR")," operators")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/IS_AS_operators"},(0,o.kt)("inlineCode",{parentName:"a"},"IS"),", ",(0,o.kt)("inlineCode",{parentName:"a"},"AS")," operators")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/Change_operators"},"Change operators")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/Comparison_operators"},"Comparison operators"))),(0,o.kt)("h3",{id:"contextindependent"},"Context independent operators"),(0,o.kt)("p",null,"Context independent property operators differ from the context dependent ones in that they do not just use the upper parameters but define the parameters themselves. As a result, they cannot be part of expressions and can only be used in the ",(0,o.kt)("a",{parentName:"p",href:"/next/=_statement"},(0,o.kt)("inlineCode",{parentName:"a"},"=")," statement")," and the ",(0,o.kt)("a",{parentName:"p",href:"/next/JOIN_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"JOIN")," operator"),": "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/DATA_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"DATA")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/GROUP_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"GROUP")," operator")," (with ",(0,o.kt)("inlineCode",{parentName:"li"},"BY")," block)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/FORMULA_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"FORMULA")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/ABSTRACT_operator"},(0,o.kt)("inlineCode",{parentName:"a"},"ABSTRACT")," operator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/next/Object_group_operator"},"Object group operators"))))}u.isMDXComponent=!0}}]);