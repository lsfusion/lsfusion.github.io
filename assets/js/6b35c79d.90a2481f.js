"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[55250],{17347:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>a,frontMatter:()=>d,metadata:()=>c,toc:()=>o});var n=s(74848),t=s(28453);const d={title:"String operators (+, CONCAT, SUBSTRING)"},i=void 0,c={id:"String_operators_+_CONCAT_SUBSTRING",title:"String operators (+, CONCAT, SUBSTRING)",description:"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:",source:"@site/docs/String_operators_+_CONCAT_SUBSTRING.md",sourceDirName:".",slug:"/String_operators_+_CONCAT_SUBSTRING",permalink:"/String_operators_+_CONCAT_SUBSTRING",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/String_operators_+_CONCAT_SUBSTRING.md",tags:[],version:"current",lastUpdatedAt:162565152e4,frontMatter:{title:"String operators (+, CONCAT, SUBSTRING)"},sidebar:"learn",previous:{title:"Extremum (MAX, MIN)",permalink:"/Extremum_MAX_MIN"},next:{title:"Structure operators (STRUCT, [])",permalink:"/Structure_operators_STRUCT"}},l={},o=[{value:"Determining the result class",id:"determining-the-result-class",level:3},{value:"Examples",id:"examples",level:3}];function h(e){const r={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Description"}),(0,n.jsx)(r.th,{children:"Example"}),(0,n.jsx)(r.th,{children:"Result"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"+"}),",\xa0",(0,n.jsx)(r.a,{href:"/CONCAT_operator",children:(0,n.jsx)(r.code,{children:"CONCAT"})})]}),(0,n.jsx)(r.td,{children:"Concatenation"}),(0,n.jsx)(r.td,{children:"Takes two operands and returns a string obtained by concatenating the strings specified in the operands"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"'a' + 'b'"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"'ab'"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"SUBSTRING"})}),(0,n.jsx)(r.td,{children:"Substring"}),(0,n.jsx)(r.td,{children:"Takes three operands and returns a substring obtained from the string specified in the first operand, starting with the character specified in the second operand, and having length specified in the third operand"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"SUBSTRING('abc', 2, 2)"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"'bc'"})})]})]})]}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"+"})," and ",(0,n.jsx)(r.code,{children:"SUBSTRING"})," operators return ",(0,n.jsx)(r.code,{children:"NULL"})," if one of the operands is ",(0,n.jsx)(r.code,{children:"NULL"}),". The ",(0,n.jsx)(r.code,{children:"CONCAT"})," operator treats ",(0,n.jsx)(r.code,{children:"NULL"})," value of the operand as an empty string (however, concatenation of two ",(0,n.jsx)(r.code,{children:"NULL"})," values still returns ",(0,n.jsx)(r.code,{children:"NULL"}),"). Also, in the ",(0,n.jsx)(r.code,{children:"CONCAT"})," operator you can optionally specify the third operand (",(0,n.jsx)(r.em,{children:"delimiter"}),") which will be inserted if and only if both operands are not ",(0,n.jsx)(r.code,{children:"NULL"}),". For example, ",(0,n.jsx)(r.code,{children:"CONCAT ' ', 'John', 'Smith'"})," = ",(0,n.jsx)(r.code,{children:"'John Smith'"}),", but ",(0,n.jsx)(r.code,{children:"CONCAT ' ', 'John', NULL"})," = ",(0,n.jsx)(r.code,{children:"'John'"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"determining-the-result-class",children:"Determining the result class"}),"\n",(0,n.jsx)(r.p,{children:"The result class is defined as:"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Operator"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"+"}),", ",(0,n.jsx)(r.code,{children:"CONCAT"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"result = STRING[p1.blankPadded AND p2.blankPadded, p1.caseInsensitive OR p2.caseInsensitive, p1.length + p2.length]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"SUBSTRING(p, from, length)"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"result = STRING[p.blankPadded, p.caseInsensitive, length]"})})]})]})]}),"\n",(0,n.jsxs)(r.p,{children:["where ",(0,n.jsx)(r.code,{children:"blankPadded"}),", ",(0,n.jsx)(r.code,{children:"caseInsensitive"})," and ",(0,n.jsx)(r.code,{children:"length"})," are determined similarly to the rules for construction of a common ancestor for two built-in classes (Strings family)."]}),"\n",(0,n.jsxs)(r.p,{children:["In the ",(0,n.jsx)(r.code,{children:"+"})," operator, operands which classes are other than string are cast to strings in accordance with the following table:"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Class"}),(0,n.jsx)(r.th,{children:"Cast class"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.code,{children:"DATE"}),", ",(0,n.jsx)(r.code,{children:"DATETIME"}),", ",(0,n.jsx)(r.code,{children:"TIME"})]}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[25]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"NUMERIC"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[p.length]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"LOGICAL"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[1]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"FILE"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"TEXT"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/User_classes",children:"Object"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[10]"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Other"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"STRING[8]"})})]})]})]}),"\n",(0,n.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lsf",children:"CLASS Person;\nfirstName = DATA STRING[100] (Person);\nmiddleName = DATA STRING[100] (Person);\nlastName = DATA STRING[100] (Person);\n\n// if some part of the name is not specified, then this part will be skipped along with a space\nfullName(Person p) = CONCAT ' ', firstName(p), middleName(p), lastName(p);     \n"})})]})}function a(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>c});var n=s(96540);const t={},d=n.createContext(t);function i(e){const r=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(d.Provider,{value:r},e.children)}}}]);