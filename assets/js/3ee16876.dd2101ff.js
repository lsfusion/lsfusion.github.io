(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[71584],{3905:function(t,e,r){"use strict";r.d(e,{Zo:function(){return c},kt:function(){return m}});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function u(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},l=Object.keys(t);for(n=0;n<l.length;n++)r=l[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)r=l[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var i=n.createContext({}),s=function(t){var e=n.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},c=function(t){var e=s(t.components);return n.createElement(i.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,l=t.originalType,i=t.parentName,c=u(t,["components","mdxType","originalType","parentName"]),d=s(r),m=a,k=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return r?n.createElement(k,o(o({ref:e},c),{},{components:r})):n.createElement(k,o({ref:e},c))}));function m(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=r.length,o=new Array(l);o[0]=d;var u={};for(var i in e)hasOwnProperty.call(e,i)&&(u[i]=e[i]);u.originalType=t,u.mdxType="string"==typeof t?t:a,o[1]=u;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},22008:function(t,e,r){"use strict";r.r(e),r.d(e,{frontMatter:function(){return o},metadata:function(){return u},toc:function(){return i},default:function(){return c}});var n=r(22122),a=r(19756),l=(r(67294),r(3905)),o={title:"Structure operations (STRUCT, [])"},u={unversionedId:"Structure_operations_STRUCT_",id:"Structure_operations_STRUCT_",isDocsHomePage:!1,title:"Structure operations (STRUCT, [])",description:"The term structure is used in the platform to refer to the classes which objects consist of a collection of other objects in a fixed order. The platform supports two operators for working with structures:",source:"@site/docs/Structure_operations_STRUCT_.md",sourceDirName:".",slug:"/Structure_operations_STRUCT_",permalink:"/next/Structure_operations_STRUCT_",editUrl:"https://github.com/danchanka/platform/edit/master/docs/en/Structure_operations_STRUCT_.md",version:"current",lastUpdatedAt:1617800626,formattedLastUpdatedAt:"4/7/2021",frontMatter:{title:"Structure operations (STRUCT, [])"},sidebar:"learn",previous:{title:"String operators (+, CONCAT, SUBSTRING)",permalink:"/next/String_operators_+_CONCAT_SUBSTRING_"},next:{title:"Type conversion",permalink:"/next/Type_conversion"}},i=[{value:"Language",id:"language",children:[]},{value:"Examples",id:"examples",children:[]}],s={toc:i};function c(t){var e=t.components,r=(0,a.Z)(t,["components"]);return(0,l.kt)("wrapper",(0,n.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The term ",(0,l.kt)("em",{parentName:"p"},"structure")," is used in the platform to refer to the ",(0,l.kt)("a",{parentName:"p",href:"/next/Classes"},"classes")," which objects consist of a collection of other objects in a fixed order. The platform supports two operators for working with structures:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Operator",(0,l.kt)("br",null)),(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Name",(0,l.kt)("br",null)),(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Description",(0,l.kt)("br",null)),(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Example",(0,l.kt)("br",null)),(0,l.kt)("br",null)),(0,l.kt)("br",null))),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),(0,l.kt)("div",null,(0,l.kt)("br",null),"Result",(0,l.kt)("br",null)),(0,l.kt)("br",null)),(0,l.kt)("br",null))))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"STRUCT"),(0,l.kt)("td",{parentName:"tr",align:null},"Creation"),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a ",(0,l.kt)("a",{parentName:"td",href:"/next/Properties"},"property")," that takes a list of operands and returns a structure consisting of the objects passed"),(0,l.kt)("td",{parentName:"tr",align:null},"STRUCT('a', 1)"),(0,l.kt)("td",{parentName:"tr",align:null},"STRUCT('a', 1)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[ ]"),(0,l.kt)("td",{parentName:"tr",align:null},"Access"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("p",null,"Creates a property that takes an operand with a fixed integer\xa0and returns an object of the structure specified in the first operand with a number equal to the specified integer")),(0,l.kt)("td",{parentName:"tr",align:null},"STRUCT('a',1)","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"1\xa0")))),(0,l.kt)("p",null,"Structures support comparison operations which are executed sequentially for each object included in the structure.\xa0"),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"To better understand how this works, it\u2019s sufficient to say that physically a structure is just a concatenation of the objects included in this structure converted to bit strings"))),(0,l.kt)("h3",{id:"language"},"Language"),(0,l.kt)("p",null,"To create a property that creates a structure the ",(0,l.kt)("a",{parentName:"p",href:"/next/STRUCT_operator"},(0,l.kt)("strong",{parentName:"a"},"STRUCT")," operator")," is used."),(0,l.kt)("p",null,"To create a property that returns an object from the structure the ",(0,l.kt)("a",{parentName:"p",href:"/next/Operator_"},(0,l.kt)("strong",{parentName:"a"},"["," ","]"),"\xa0operator")," is used."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lsf"},"objectStruct(a, b) = STRUCT(a, f(b));\nstringStruct() = STRUCT(1, 'two', 3.0);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Letter;\nattachment1 = DATA FILE (Letter);\nattachment2 = DATA FILE (Letter);\nletterAttachments (Letter l) = STRUCT(attachment1(l), attachment2(l));\nsecondAttachment(Letter l) = letterAttachments(l)[2]; // returns attachment2\n")))}c.isMDXComponent=!0}}]);