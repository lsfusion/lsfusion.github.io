(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[95781],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,h=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},48425:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=n(74034),r=n(79973),o=(n(67294),n(3905)),i=["components"],l={title:"How-to: Custom Components (objects)"},c=void 0,s={unversionedId:"How-to_Custom_components_objects",id:"How-to_Custom_components_objects",isDocsHomePage:!1,title:"How-to: Custom Components (objects)",description:"By default, each object on a form with GRID view is displayed on the form as a flat table with columns.",source:"@site/docs/How-to_Custom_components_objects.md",sourceDirName:".",slug:"/How-to_Custom_components_objects",permalink:"/next/How-to_Custom_components_objects",editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/How-to_Custom_components_objects.md",tags:[],version:"current",lastUpdatedAt:1636101477,formattedLastUpdatedAt:"11/5/2021",frontMatter:{title:"How-to: Custom Components (objects)"},sidebar:"learn",previous:{title:"How-to: Custom components (properties)",permalink:"/next/How-to_Custom_components_properties"},next:{title:"How-to: Reports",permalink:"/next/How-to_Reports"}},m=[{value:"Domain Logic",id:"domain-logic",children:[],level:3},{value:"Interface",id:"interface",children:[],level:3}],p={toc:m};function d(e){var t=e.components,l=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"By default, each object on a form with GRID view is displayed on the form as a flat table with columns.\nHowever, it is possible to create your own components in the platform to visualize the list of objects."),(0,o.kt)("p",null,'As an illustrative example, let\'s consider the task of displaying a list of products with images in the form of "tiles".'),(0,o.kt)("h3",{id:"domain-logic"},"Domain Logic"),(0,o.kt)("p",null,"First let's create classes and properties of items, as well as edit form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Item 'Item';\n\nname 'Name' = DATA STRING (Item) NONULL;\nprice 'Price' = DATA NUMERIC[12,2] (Item) NONULL;\nimage '' = DATA IMAGEFILE (Item);\n\nFORM item 'Item'\n    OBJECTS i = Item PANEL\n    PROPERTIES(i) name, price, image\n    \n    EDIT Item OBJECT i\n;\n\nDESIGN item {\n    OBJECTS {\n        MOVE PROPERTY(image(i)) {\n            fill = 1;\n        }\n    }\n}\n")),(0,o.kt)("p",null,"The name, price and image must be specified for each item."),(0,o.kt)("h3",{id:"interface"},"Interface"),(0,o.kt)("p",null,"Let's create a form with a list of items. To do this let's add to the form an object ",(0,o.kt)("em",{parentName:"p"},"Item"),", its properties, and actions to add, edit, and delete:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lsf"},"FORM items 'Items'\n    OBJECTS i = Item CUSTOM 'itemCards'\n    PROPERTIES(i) READONLY image, price, name\n    PROPERTIES(i) NEWSESSION new = NEW, edit = EDIT GRID, DELETE GRID\n;\n\nNAVIGATOR {\n    NEW items;\n}\n")),(0,o.kt)("p",null,"The keyword ",(0,o.kt)("strong",{parentName:"p"},"CUSTOM")," specifies that not the standard tabular interface should be used to draw the list of items,\nbut the components created by the function ",(0,o.kt)("em",{parentName:"p"},"itemCards"),". Let's declare this function in the file ",(0,o.kt)("em",{parentName:"p"},"itemcards.js"),", which we'll place in the folder ",(0,o.kt)("em",{parentName:"p"},"resources/web"),".\nIt will return an object consisting of two functions: ",(0,o.kt)("em",{parentName:"p"},"render")," and ",(0,o.kt)("em",{parentName:"p"},"update"),"."),(0,o.kt)("p",null,"The function ",(0,o.kt)("em",{parentName:"p"},"render")," takes as input the controller and the element inside which the new elements necessary to display the data are to be created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'render: (element, controller) => {\n    let cards = document.createElement("div")\n    cards.classList.add("item-cards");\n\n    element.cards = cards;\n    element.appendChild(cards);\n},\n')),(0,o.kt)("p",null,"In this example we create a new ",(0,o.kt)("em",{parentName:"p"},"div")," ",(0,o.kt)("em",{parentName:"p"},"cards"),", remember it, and append it to ",(0,o.kt)("em",{parentName:"p"},"element"),"."),(0,o.kt)("p",null,"To update the displayed values, the platform will call the ",(0,o.kt)("em",{parentName:"p"},"update")," function each time, and the same ",(0,o.kt)("em",{parentName:"p"},"element")," will be passed to it,\nas in the ",(0,o.kt)("em",{parentName:"p"},"render")," function, and the ",(0,o.kt)("em",{parentName:"p"},"list")," of objects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'update: (element, controller, list) => {\n    while (element.cards.lastElementChild) {\n        element.cards.removeChild(element.cards.lastElementChild);\n    }\n\n    for (let item of list) {\n        let card = document.createElement("div")\n        card.classList.add("item-card");\n\n        if (controller.isCurrent(item))\n            card.classList.add("item-card-current");\n\n        let cardImage = document.createElement("img")\n        cardImage.classList.add("item-card-image");\n        cardImage.src = item.image;\n        card.appendChild(cardImage);\n\n        let cardPrice = document.createElement("div")\n        cardPrice.classList.add("item-card-price");\n        cardPrice.innerHTML = item.price;\n        card.appendChild(cardPrice);\n\n        let cardName = document.createElement("div")\n        cardName.classList.add("item-card-name");\n        cardName.innerHTML = item.name;\n        card.appendChild(cardName);\n\n        element.cards.appendChild(card);\n\n        card.onclick = function(event) {\n            if (!controller.isCurrent(item)) controller.changeSimpleGroupObject(item, false, null);\n        }\n        card.ondblclick = function(event) {\n            controller.changeProperty(\'edit\', item, true);\n        }\n    }\n}\n')),(0,o.kt)("p",null,"Because the ",(0,o.kt)("em",{parentName:"p"},"update")," function is called whenever the data changes, the first thing that happens is that all previously created elements (namely, item cards) are deleted."),(0,o.kt)("p",null,"This example uses the simplest update scheme, but if necessary, it can be optimized by updating the DOM only for changed values.\nTo do that, the ",(0,o.kt)("em",{parentName:"p"},"controller")," has ",(0,o.kt)("em",{parentName:"p"},"getDiff")," method, where you pass a new ",(0,o.kt)("em",{parentName:"p"},"list")," of objects as a parameter.\nThis method will return as a result an object with arrays ",(0,o.kt)("em",{parentName:"p"},"add"),", ",(0,o.kt)("em",{parentName:"p"},"update"),", ",(0,o.kt)("em",{parentName:"p"},"remove"),", which store added, changed and deleted objects respectively.\nExample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let diff = controller.getDiff(list);\nfor (let object of diff.add) { ... }\nfor (let object of diff.update) { ... }\nfor (let option of diff.remove) { ... }\n")),(0,o.kt)("p",null,"After removing the old elements, for each object in the ",(0,o.kt)("em",{parentName:"p"},"list")," array a ",(0,o.kt)("em",{parentName:"p"},"div")," ",(0,o.kt)("em",{parentName:"p"},"card")," is created, in which the desired display elements of each property are placed.\nThe names of the object fields correspond to the names of the properties on the form. The ",(0,o.kt)("em",{parentName:"p"},"isCurrent")," method determines which object from the list is current."),(0,o.kt)("p",null,"At the very end of the function, mouse click handlers are added to the item card. "),(0,o.kt)("p",null,"On a single click ",(0,o.kt)("em",{parentName:"p"},"changeSimpleGroupObject")," method is called on the controller, which changes the current object.\nThe second parameter (",(0,o.kt)("em",{parentName:"p"},"false"),") specifies that the server should call the ",(0,o.kt)("em",{parentName:"p"},"update")," function again with a new list of objects (possibly the same one).\nSince the value of the ",(0,o.kt)("em",{parentName:"p"},"isCurrent")," method will change, re-creating the item cards will change the currently selected object in the interface."),(0,o.kt)("p",null,"A double-click calls ",(0,o.kt)("em",{parentName:"p"},"changeProperty")," method, which changes the current value of the ",(0,o.kt)("em",{parentName:"p"},"edit")," property to the value passed in the second parameter.\nSince ",(0,o.kt)("em",{parentName:"p"},"edit")," is an action, ",(0,o.kt)("em",{parentName:"p"},"true")," is passed as the value, and will be called instead of changing it.\nIn this case the item editing form will be opened."),(0,o.kt)("p",null,"To combine the ",(0,o.kt)("em",{parentName:"p"},"render")," and ",(0,o.kt)("em",{parentName:"p"},"update")," functions into one, ",(0,o.kt)("em",{parentName:"p"},"itemCards")," function is created, which returns them within the same object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function itemCards() {\n    return {\n        render: function (element, controller) => {\n            ...\n        },\n        update: function (element, controller, list) {\n            ...\n        }\n    }\n}\n")),(0,o.kt)("p",null,"To complete the design setup, create a file ",(0,o.kt)("em",{parentName:"p"},"itemcards.css"),", which we will also place in the ",(0,o.kt)("em",{parentName:"p"},"resources/web")," folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},".item-cards {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    grid-auto-rows: 200px;\n    grid-gap: 10px;\n}\n\n.item-card {\n    cursor: pointer;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    align-items: center;\n    padding: 8px;\n}\n.item-card-current {\n    background-color: lightblue;\n}\n\n.item-card-image {\n    flex: 1;\n    min-height: 100px;\n}\n\n.item-card-price {\n    font-weight: bold;\n}\n\n.item-card-name {\n    color: gray;\n}\n")),(0,o.kt)("p",null,"The resulting form will look like this:\n",(0,o.kt)("img",{src:n(72665).Z})))}d.isMDXComponent=!0},72665:function(e,t,n){"use strict";t.Z=n.p+"assets/images/How-to_Custom_components_objects-bd4ea5401bf0f161e5521d35011f8e5d.png"}}]);