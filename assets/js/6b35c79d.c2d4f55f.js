"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[94214],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},N=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),N=s(n),u=a,c=N["".concat(p,".").concat(u)]||N[u]||m[u]||l;return n?r.createElement(c,i(i({ref:t},d),{},{components:n})):r.createElement(c,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=N;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}N.displayName="MDXCreateElement"},80251:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s}});var r=n(83117),a=(n(67294),n(3905));const l={title:"String operators (+, CONCAT, SUBSTRING)"},i=void 0,o={unversionedId:"String_operators_+_CONCAT_SUBSTRING",id:"String_operators_+_CONCAT_SUBSTRING",title:"String operators (+, CONCAT, SUBSTRING)",description:"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:",source:"@site/docs/String_operators_+_CONCAT_SUBSTRING.md",sourceDirName:".",slug:"/String_operators_+_CONCAT_SUBSTRING",permalink:"/String_operators_+_CONCAT_SUBSTRING",draft:!1,editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/String_operators_+_CONCAT_SUBSTRING.md",tags:[],version:"current",lastUpdatedAt:1625651520,formattedLastUpdatedAt:"Jul 7, 2021",frontMatter:{title:"String operators (+, CONCAT, SUBSTRING)"},sidebar:"learn",previous:{title:"Extremum (MAX, MIN)",permalink:"/Extremum_MAX_MIN"},next:{title:"Structure operators (STRUCT, [])",permalink:"/Structure_operators_STRUCT"}},p={},s=[{value:"Determining the result class",id:"determining-the-result-class",level:3},{value:"Examples",id:"examples",level:3}],d={toc:s};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"),(0,a.kt)("th",{parentName:"tr",align:null},"Result"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"+"),",","\xa0",(0,a.kt)("a",{parentName:"td",href:"/CONCAT_operator"},(0,a.kt)("inlineCode",{parentName:"a"},"CONCAT"))),(0,a.kt)("td",{parentName:"tr",align:null},"Concatenation"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes two operands and returns a string obtained by concatenating the strings specified in the operands"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"'a' + 'b'")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"'ab'"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"SUBSTRING")),(0,a.kt)("td",{parentName:"tr",align:null},"Substring"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes three operands and returns a substring obtained from the string specified in the first operand, starting with the character specified in the second operand, and having length specified in the third operand"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"SUBSTRING('abc', 2, 2)")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"'bc'"))))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"SUBSTRING")," operators return ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," if one of the operands is ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"CONCAT")," operator treats ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," value of the operand as an empty string (however, concatenation of two ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL")," values still returns ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),"). Also, in the ",(0,a.kt)("inlineCode",{parentName:"p"},"CONCAT")," operator you can optionally specify the third operand (",(0,a.kt)("em",{parentName:"p"},"delimiter"),") which will be inserted if and only if both operands are not ",(0,a.kt)("inlineCode",{parentName:"p"},"NULL"),". For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"CONCAT ' ', 'John', 'Smith'")," = ",(0,a.kt)("inlineCode",{parentName:"p"},"'John Smith'"),", but ",(0,a.kt)("inlineCode",{parentName:"p"},"CONCAT ' ', 'John', NULL")," = ",(0,a.kt)("inlineCode",{parentName:"p"},"'John'"),"."),(0,a.kt)("h3",{id:"determining-the-result-class"},"Determining the result class"),(0,a.kt)("p",null,"The result class is defined as:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"+"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"CONCAT")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"result = STRING[p1.blankPadded AND p2.blankPadded, p1.caseInsensitive OR p2.caseInsensitive, p1.length + p2.length]"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"SUBSTRING(p, from, length)")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"result = STRING[p.blankPadded, p.caseInsensitive, length]"))))),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"blankPadded"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"caseInsensitive")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"length")," are determined similarly to the rules for construction of a common ancestor for two built-in classes (Strings family)."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," operator, operands which classes are other than string are cast to strings in accordance with the following table:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Class"),(0,a.kt)("th",{parentName:"tr",align:null},"Cast class"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"DATE"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"DATETIME"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"TIME")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"STRING[25]"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"NUMERIC")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"STRING[p.length]"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"LOGICAL")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"STRING[1]"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"FILE")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TEXT"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/User_classes"},"Object")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"STRING[10]"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Other"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"STRING[8]"))))),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Person;\nfirstName = DATA STRING[100] (Person);\nmiddleName = DATA STRING[100] (Person);\nlastName = DATA STRING[100] (Person);\n\n// if some part of the name is not specified, then this part will be skipped along with a space\nfullName(Person p) = CONCAT ' ', firstName(p), middleName(p), lastName(p);     \n")))}m.isMDXComponent=!0}}]);