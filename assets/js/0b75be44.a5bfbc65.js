(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[2110],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,p(p({ref:t},c),{},{components:n})):r.createElement(f,p({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32379:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var r=n(22122),a=n(19756),o=(n(67294),n(3905)),p={title:"INPUT operator"},i={unversionedId:"INPUT_operator",id:"INPUT_operator",isDocsHomePage:!1,title:"INPUT operator",description:"The\xa0INPUT\xa0operator creates an\xa0action that inputs a primitive.",source:"@site/docs/INPUT_operator.md",sourceDirName:".",slug:"/INPUT_operator",permalink:"/next/INPUT_operator",editUrl:"https://github.com/danchanka/platform/edit/master/docs/en/INPUT_operator.md",version:"current",lastUpdatedAt:1617631212,formattedLastUpdatedAt:"4/5/2021",frontMatter:{title:"INPUT operator"},sidebar:"learn",previous:{title:"IMPORT operator",permalink:"/next/IMPORT_operator"},next:{title:"MESSAGE operator",permalink:"/next/MESSAGE_operator"}},l=[{value:"Syntax",id:"syntax",children:[]},{value:"Description",id:"description",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"Examples",id:"examples",children:[]}],s={toc:l};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("strong",{parentName:"p"},"INPUT"),"\xa0operator creates an\xa0",(0,o.kt)("a",{parentName:"p",href:"/next/Actions"},"action")," that ",(0,o.kt)("a",{parentName:"p",href:"/next/Primitive_input_INPUT_"},"inputs a primitive"),"."),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"INPUT inputOptions \n[CHANGE [= changeExpr]]\n[DO actionOperator [ELSE elseActionOperator]]\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"inputOptions")," - input options. Specified\xa0by one of the following syntaxes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[alias =] builtInClassName\n[alias] = expr\n")),(0,o.kt)("h3",{id:"description"},"Description"),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("strong",{parentName:"p"},"INPUT"),"\xa0operator creates an action which allows to request the value of one of the\xa0",(0,o.kt)("a",{parentName:"p",href:"/next/Built-in_classes"},"built-in classes")," from the user."),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"builtInClassName")),(0,o.kt)("p",null,"The name of one of the ",(0,o.kt)("a",{parentName:"p",href:"/next/Built-in_classes"},"built-in classes"),".\xa0"),(0,o.kt)("p",null,"expr"),(0,o.kt)("p",null,"\xa0 \xa0 \xa0 \xa0\xa0An ",(0,o.kt)("a",{parentName:"p",href:"/next/Expression"},"expression"),", which value determines the ",(0,o.kt)("a",{parentName:"p",href:"/next/Value_input#initial"},"initial value")," of the input."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"alias")),(0,o.kt)("p",null,"The name of the local parameter to which the input result is written.\xa0",(0,o.kt)("a",{parentName:"p",href:"/next/IDs#id-broken"},"Simple ID"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"CHANGE")),(0,o.kt)("p",null,"A keyword specifying that in addition to the value input the result needs to be written to the specified property."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"changeExpr")),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"/next/Expression"},"expression")," that determines the property to which the input result is written.\xa0By default, the property specified as the initial input value is used."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"actionOperator")),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/next/Action_operator#contextdependent"},"context-dependent action operator")," that is executed if the input was completed successfully."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"elseActionOperator")),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/next/Action_operator#contextdependent"},"context-dependent action operator")," that is executed if the input was cancelled. The input result parameter cannot be used as parameters."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lsf"},"changeCustomer (Order o)  {\n    INPUT s = STRING[100] DO {\n        customer(o) <- s;\n        IF s THEN\n            MESSAGE 'Customer changed to ' + s;\n        ELSE\n            MESSAGE 'Customer dropped';\n    }\n}\n\nFORM order\n    OBJECTS o = Order\n    PROPERTIES(o) customer ON CHANGE changeCustomer(o)\n;\n\ntestFile  {\n    INPUT f = FILE DO { // requesting a dialog to select a file\n        open(f); // opening the selected file\n    }\n}\n")))}c.isMDXComponent=!0}}]);