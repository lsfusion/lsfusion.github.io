(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[88789],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return k}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),k=a,m=u["".concat(c,".").concat(k)]||u[k]||d[k]||r;return n?o.createElement(m,l(l({ref:t},p),{},{components:n})):o.createElement(m,l({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},40473:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var o=n(22122),a=n(19756),r=(n(67294),n(3905)),l={title:"How-to: GROUP LAST"},i=void 0,c={unversionedId:"How-to_GROUP_LAST",id:"version-v4/How-to_GROUP_LAST",isDocsHomePage:!1,title:"How-to: GROUP LAST",description:"Example 1",source:"@site/versioned_docs/version-v4/How-to_GROUP_LAST.md",sourceDirName:".",slug:"/How-to_GROUP_LAST",permalink:"/How-to_GROUP_LAST",editUrl:"https://github.com/lsfusion/platform/edit/v4/docs/en/How-to_GROUP_LAST.md",version:"v4",lastUpdatedAt:1619709222,formattedLastUpdatedAt:"4/29/2021",frontMatter:{title:"How-to: GROUP LAST"},sidebar:"version-v4/learn",previous:{title:"How-to: CASE/IF/OVERRIDE",permalink:"/How-to_CASE_IF_OVERRIDE"},next:{title:"How-to: GROUP CONCAT",permalink:"/How-to_GROUP_CONCAT"}},s=[{value:"Example 1",id:"example-1",children:[{value:"Task",id:"task",children:[]},{value:"Solution",id:"solution",children:[]}]},{value:"Example 2",id:"example-2",children:[{value:"Task",id:"task-1",children:[]},{value:"Solution",id:"solution-1",children:[]}]},{value:"Example 3",id:"example-3",children:[{value:"Task",id:"task-2",children:[]},{value:"Solution",id:"solution-2",children:[]}]},{value:"Example 4",id:"example-4",children:[{value:"Task",id:"task-3",children:[]},{value:"Solution",id:"solution-3",children:[]}]},{value:"Example 5",id:"example-5",children:[{value:"Task",id:"task-4",children:[]},{value:"Solution",id:"solution-4",children:[]}]}],p={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("h3",{id:"task"},"Task"),(0,r.kt)("p",null,"We have a set of books associated with a certain category, and the dates of their receipt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Book 'Book';\nCLASS Category 'Category';\n\ncategory 'Category' = DATA Category (Book);\ndate 'Arrival date' = DATA DATE (Book);\n")),(0,r.kt)("p",null,"We need to find the latest received book in the selected category."),(0,r.kt)("h3",{id:"solution"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"book 'Last book' (Category c) = GROUP LAST Book b ORDER date(b), b BY category(b);\n")),(0,r.kt)("p",null,"It is important to remember that order in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ORDER")," clause should be uniquely determined. To do this, the book (specifically, its internal ID) should be used as the second parameter since several books may have the same date of receipt."),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("h3",{id:"task-1"},"Task"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"#example-1"},(0,r.kt)("strong",{parentName:"a"},"Example 1")),", but the author and genre list are specified for each book."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Author 'Author';\nCLASS Genre 'Genre';\n\nauthor 'Author' = DATA Author (Book);\ngenre 'Genre' = DATA Genre (Book);\nin 'On' = DATA BOOLEAN (Book, Genre);\n")),(0,r.kt)("p",null,"We need to find the most popular category by author and genre."),(0,r.kt)("h3",{id:"solution-1"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"countBooks 'Number of books' (Category c, Author a, Genre g) = GROUP SUM 1 IF in(Book b, g) BY category(b), author(b);\n\ncategory (Author a, Genre g) = GROUP LAST Category c ORDER countBooks(c, a, g), c WHERE countBooks(c, a, g);\n")),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("h3",{id:"task-2"},"Task"),(0,r.kt)("p",null,"We have a certain set of books and the information about price changes per book and warehouse. Each object of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ledger")," class reflects a single change in price since a specific date."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"CLASS Stock 'Warehouse';\n\nCLASS Ledger 'Price change';\ndate = DATA DATE (Ledger);\nstock = DATA Stock (Ledger);\nbook = DATA Book (Ledger);\n\nprice = DATA NUMERIC[10,2] (Ledger);\n")),(0,r.kt)("p",null,"We need to identify the current price for a given book at the warehouse."),(0,r.kt)("h3",{id:"solution-2"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"currentPrice (Book b, Stock s) = GROUP LAST price(Ledger l) ORDER date(l), l BY book(l), stock(l);//#solution3\n")),(0,r.kt)("h2",{id:"example-4"},"Example 4"),(0,r.kt)("h3",{id:"task-3"},"Task"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"#example-3"},(0,r.kt)("strong",{parentName:"a"},"Example 3")),"."),(0,r.kt)("p",null,"We need to find the price valid for a specific date for a book at the warehouse."),(0,r.kt)("h3",{id:"solution-3"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"price (Book b, Stock s, DATE d) = GROUP LAST price(Ledger l) ORDER date(l), l WHERE date(l) <= d BY book(l), stock(l);\n")),(0,r.kt)("h2",{id:"example-5"},"Example 5"),(0,r.kt)("h3",{id:"task-4"},"Task"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"#example-4"},(0,r.kt)("strong",{parentName:"a"},"Example 4")),", except that a change in price has an expiration date. If this date is not specified, then the price is not limited in time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"dateTo 'Valid until (inclusive)' = DATA DATE (Ledger);\n")),(0,r.kt)("h3",{id:"solution-4"},"Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lsf"},"currentPriceDate (Book b, Stock s) = GROUP LAST price(Ledger l) ORDER date(l), l WHERE NOT dateTo(l) < currentDate() BY book(l), stock(l);\npriceDate(Book b, Stock s, DATE d) = GROUP LAST price(Ledger l) ORDER date(l), l WHERE date(l) <= d AND NOT dateTo(l) < d BY book(l), stock(l);\n")),(0,r.kt)("p",null,"Note that the expression ",(0,r.kt)("inlineCode",{parentName:"p"},"NOT dateTo(l) < date")," does not always mean the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"dateTo(l) >= date"),". The difference occurs when the value ",(0,r.kt)("inlineCode",{parentName:"p"},"dateTo(l)")," equals ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". In the first case, ",(0,r.kt)("inlineCode",{parentName:"p"},"dateTo(l) < date")," equals ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," (i. e. false), while ",(0,r.kt)("inlineCode",{parentName:"p"},"NOT NULL")," equals ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUE"),". In the second case, the expression obviously equals ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," (i. e. false)."))}d.isMDXComponent=!0}}]);