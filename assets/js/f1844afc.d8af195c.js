(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[37979],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},61458:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return i},default:function(){return p}});var a=n(22122),r=n(19756),s=(n(67294),n(3905)),o={title:"How-to: Class extension"},l={unversionedId:"How-to_Class_extension",id:"How-to_Class_extension",isDocsHomePage:!1,title:"How-to: Class extension",description:"The typical scheme for extracting relations between classes to a separate module is as follows:",source:"@site/docs/How-to_Class_extension.md",sourceDirName:".",slug:"/How-to_Class_extension",permalink:"/next/How-to_Class_extension",editUrl:"https://github.com/danchanka/platform/edit/master/docs/en/How-to_Class_extension.md",version:"current",lastUpdatedAt:1617631212,formattedLastUpdatedAt:"4/5/2021",frontMatter:{title:"How-to: Class extension"},sidebar:"learn",previous:{title:"How-to: Extensions",permalink:"/next/How-to_Extensions"},next:{title:"How-to: Property extension",permalink:"/next/How-to_Property_extension"}},i=[],c={toc:i};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The typical scheme for extracting relations between classes to a separate module is as follows:"),(0,s.kt)("p",null,"Create the\xa0",(0,s.kt)("strong",{parentName:"p"},"MA")," module in which the\xa0",(0,s.kt)("strong",{parentName:"p"},"A"),"\xa0class will be created:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lsf"},"MODULE MA;\n\nCLASS ABSTRACT A; // declaring an abstract class\na = ABSTRACT BPSTRING[10] (A); // declaring an abstract property a\n")),(0,s.kt)("p",null,"Create the\xa0",(0,s.kt)("strong",{parentName:"p"},"MB")," module in which the\xa0",(0,s.kt)("strong",{parentName:"p"},"B"),"\xa0class will be created:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lsf"},"MODULE MB;\n\nCLASS B; // declaring class B\nb = DATA BPSTRING[10] (B); // declaring the data property b for class B\n")),(0,s.kt)("p",null,"Create the\xa0",(0,s.kt)("strong",{parentName:"p"},"MBA")," module in which the relation between the\xa0",(0,s.kt)("strong",{parentName:"p"},"A"),"\xa0and\xa0",(0,s.kt)("strong",{parentName:"p"},"B"),"\xa0class will be defined:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lsf"},"MODULE MBA;\n\nREQUIRE MA, MB; // specifying that the MBA module depends on the MA and MB modules so that the system elements declared in them can be used in that module\n\nEXTEND CLASS B : A; // inheriting class B from A\na(ba) += b(ba); // specifying that for the abstract property a, property B should be used as an implementation\n")),(0,s.kt)("p",null,"Therefore, the\xa0",(0,s.kt)("strong",{parentName:"p"},"MA"),"\xa0and\xa0",(0,s.kt)("strong",{parentName:"p"},"MB")," modules do not directly depend on each other and the relation between them can be enabled (disabled) by linking (unlinking) the\xa0",(0,s.kt)("strong",{parentName:"p"},"MBA")," module. Note that the\xa0",(0,s.kt)("strong",{parentName:"p"},"MBA"),"\xa0module extends the functionality of the\xa0",(0,s.kt)("strong",{parentName:"p"},"MB")," module without any changes to its code."),(0,s.kt)("p",null,"You can use mixin classes when using the metacode as follows:"),(0,s.kt)("p",null,"Suppose that we have a metacode that declares a class and defines certain properties for it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lsf"},"MODULE MyModule;\n\nMETA defineMyClass (className) // declaring the defineMyClass metacode with the className parameter\n    CLASS className; // declaring a class named className\n    myProperty###className = DATA BPSTRING[20] (className); // adding a property named myProperty + className for the created class\nEND\n")),(0,s.kt)("p",null,"Note that when calling this metacode, you cannot specify the classes from which the created class must inherit anything. However, this can be implemented through a mixin of classes as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lsf"},'CLASS MySuperClass;\n\n@defineMyClass(MyClass); // calling the metacode that will create the class and property\n\nEXTEND CLASS MyClass : MySuperClass; // inheriting MyClass from MySuperClass, while MyClass will "will receive" all the properties that are declared for the MySuperClass class\n')))}p.isMDXComponent=!0}}]);