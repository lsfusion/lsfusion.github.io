"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[96401],{59906:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var t=n(74848),a=n(28453);const r={title:"How-to: Class extension"},o=void 0,l={id:"How-to_Class_extension",title:"How-to: Class extension",description:"The typical scheme for extracting relations between classes to a separate module is as follows:",source:"@site/versioned_docs/version-v5/How-to_Class_extension.md",sourceDirName:".",slug:"/How-to_Class_extension",permalink:"/How-to_Class_extension",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v5/docs/en/How-to_Class_extension.md",tags:[],version:"v5",lastUpdatedAt:1685108136,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{title:"How-to: Class extension"},sidebar:"learn",previous:{title:"How-to: Extensions",permalink:"/How-to_Extensions"},next:{title:"How-to: Property extension",permalink:"/How-to_Property_extension"}},c={},i=[];function d(e){const s={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"The typical scheme for extracting relations between classes to a separate module is as follows:"}),"\n",(0,t.jsxs)(s.p,{children:["Create the ",(0,t.jsx)(s.code,{children:"MA"})," module in which the ",(0,t.jsx)(s.code,{children:"A"})," class will be created:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lsf",children:"MODULE MA;\r\n\r\nCLASS ABSTRACT A; // declaring an abstract class\r\na = ABSTRACT BPSTRING[10] (A); // declaring an abstract property a\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the ",(0,t.jsx)(s.code,{children:"MB"})," module in which the ",(0,t.jsx)(s.code,{children:"B"})," class will be created:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lsf",children:"MODULE MB;\r\n\r\nCLASS B; // declaring class B\r\nb = DATA BPSTRING[10] (B); // declaring the data property b for class B\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create the ",(0,t.jsx)(s.code,{children:"MBA"})," module in which the relation between the ",(0,t.jsx)(s.code,{children:"A"})," and ",(0,t.jsx)(s.code,{children:"B"})," class will be defined:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lsf",children:"MODULE MBA;\r\n\r\n// specifying that the MBA module depends on the MA and MB modules so \r\n// that the system elements declared in them can be used in that module\r\nREQUIRE MA, MB; \r\n\r\nEXTEND CLASS B : A; // inheriting class B from A\r\n// specifying that for the abstract property a, property B should be used as an implementation\r\na(ba) += b(ba); \n"})}),"\n",(0,t.jsxs)(s.p,{children:["Therefore, the ",(0,t.jsx)(s.code,{children:"MA"})," and ",(0,t.jsx)(s.code,{children:"MB"})," modules do not directly depend on each other and the relation between them can be enabled (disabled) by linking (unlinking) the ",(0,t.jsx)(s.code,{children:"MBA"})," module. Note that the ",(0,t.jsx)(s.code,{children:"MBA"})," module extends the functionality of the ",(0,t.jsx)(s.code,{children:"MB"})," module without any changes to its code."]}),"\n",(0,t.jsx)(s.p,{children:"You can use mixin classes when using the metacode as follows:"}),"\n",(0,t.jsx)(s.p,{children:"Suppose that we have a metacode that declares a class and defines certain properties for it:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lsf",children:"MODULE MyModule;\r\n\r\nMETA defineMyClass (className) // declaring the defineMyClass metacode with the className parameter\r\n    CLASS className; // declaring a class named className\r\n    // adding a property named myProperty + className for the created class\r\n    myProperty###className = DATA BPSTRING[20] (className); \r\nEND\n"})}),"\n",(0,t.jsx)(s.p,{children:"Note that when calling this metacode, you cannot specify the classes from which the created class must inherit anything. However, this can be implemented through a mixin of classes as follows:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-lsf",children:'CLASS MySuperClass;\r\n\r\n@defineMyClass(MyClass); // calling the metacode that will create the class and property\r\n\r\n// inheriting MyClass from MySuperClass, while MyClass will "will receive"\r\n// all the properties that are declared for the MySuperClass class\r\nEXTEND CLASS MyClass : MySuperClass; \n'})})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var t=n(96540);const a={},r=t.createContext(a);function o(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);