"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[97057],{60169:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=t(74848),s=t(28453);const a={title:"CONCAT operator"},o=void 0,i={id:"CONCAT_operator",title:"CONCAT operator",description:"The CONCAT operator creates a property that implements a string concatenation.",source:"@site/versioned_docs/version-v4/CONCAT_operator.md",sourceDirName:".",slug:"/CONCAT_operator",permalink:"/v4/CONCAT_operator",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v4/docs/en/CONCAT_operator.md",tags:[],version:"v4",lastUpdatedAt:1708525070,formattedLastUpdatedAt:"Feb 21, 2024",frontMatter:{title:"CONCAT operator"},sidebar:"learn",previous:{title:"CLASS operator",permalink:"/v4/CLASS_operator"},next:{title:"DATA operator",permalink:"/v4/DATA_operator"}},l={},c=[{value:"Syntax",id:"syntax",level:3},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function p(e){const r={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"CONCAT"})," operator creates a ",(0,n.jsx)(r.a,{href:"/v4/Properties",children:"property"})," that implements a string ",(0,n.jsx)(r.a,{href:"/v4/String_operators_+_CONCAT_SUBSTRING",children:"concatenation"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"CONCAT separatorString, concatExpr1, ..., concatExprN\n"})}),"\n",(0,n.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"CONCAT"})," operator creates a property that concatenates values using the ",(0,n.jsx)(r.code,{children:"separatorString"})," separator. Here, ",(0,n.jsx)(r.code,{children:"NULL"})," values are skipped and the separator is inserted only between non-",(0,n.jsx)(r.code,{children:"NULL"})," values."]}),"\n",(0,n.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"separatorString"})}),"\n",(0,n.jsxs)(r.p,{children:["A ",(0,n.jsx)(r.a,{href:"/v4/Literals#strliteral",children:"string literal"})," to be used as a separator."]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"concatExpr1, ..., concatExprN"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"/v4/Expression",children:"Expressions"})," whose values are to be concatenated."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lsf",children:"CLASS Person;\nfirstName = DATA STRING[100] (Person);\nmiddleName = DATA STRING[100] (Person);\nlastName = DATA STRING[100] (Person);\n\n// if some part of the name is not specified, then this part will be skipped along with a space\nfullName(Person p) = CONCAT ' ', firstName(p), middleName(p), lastName(p);     \n"})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>i});var n=t(96540);const s={},a=n.createContext(s);function o(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);