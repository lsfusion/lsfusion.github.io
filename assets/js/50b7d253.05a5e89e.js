(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[76102],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},90130:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return l},default:function(){return c}});var a=n(22122),r=n(19756),o=(n(67294),n(3905)),i={title:"ABSTRACT operator (action)"},p={unversionedId:"ABSTRACT_operator_action_",id:"ABSTRACT_operator_action_",isDocsHomePage:!1,title:"ABSTRACT operator (action)",description:"The\xa0ABSTRACT operator -\xa0creating an\xa0abstract action.",source:"@site/docs/ABSTRACT_operator_action_.md",sourceDirName:".",slug:"/ABSTRACT_operator_action_",permalink:"/next/ABSTRACT_operator_action_",editUrl:"https://github.com/danchanka/platform/edit/master/docs/en/ABSTRACT_operator_action_.md",version:"current",lastUpdatedAt:1617631212,formattedLastUpdatedAt:"4/5/2021",frontMatter:{title:"ABSTRACT operator (action)"},sidebar:"learn",previous:{title:"Operator{...}",permalink:"/next/Operator_..._"},next:{title:"ACTIVATE operator",permalink:"/next/ACTIVATE_operator"}},l=[{value:"Syntax",id:"syntax",children:[]},{value:"Description",id:"description",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"Examples",id:"examples",children:[]}],s={toc:l};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("strong",{parentName:"p"},"ABSTRACT")," operator -\xa0creating an\xa0",(0,o.kt)("a",{parentName:"p",href:"/next/Action_extension"},"abstract action"),".\xa0"),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ABSTRACT [type [exclusionType]] [FIRST | LAST] [CHECKED] (argClassName1, ..., argClassNameN) \n")),(0,o.kt)("h3",{id:"description"},"Description"),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("strong",{parentName:"p"},"ABSTRACT"),"\xa0operator creates an abstract action, the implementation of which can be defined later (for example, in other\xa0",(0,o.kt)("a",{parentName:"p",href:"/next/Modules"},"modules")," dependent on the module containing the\xa0",(0,o.kt)("strong",{parentName:"p"},"ABSTRACT"),"\xa0action). Implementations are added to the action using the\xa0",(0,o.kt)("a",{parentName:"p",href:"/next/ACTION+_instruction"},"instruction + ="),". When executing ",(0,o.kt)("strong",{parentName:"p"},"MULTI")," or ",(0,o.kt)("strong",{parentName:"p"},"CASE")," type abstract actions, their\xa0matching\xa0implementation is selected and executed. The selection of the matching implementation depends on the\xa0selection conditions that are defined when adding implementations, and on the\xa0",(0,o.kt)("strong",{parentName:"p"},"ABSTRACT")," operator type."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"CASE")," - a general case.**\xa0",(0,o.kt)("strong",{parentName:"li"},"The selection condition will be explicitly specified in the implementation using the\xa0["),"WHEN**\xa0block](/next/ACTION+_instruction)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"MULTI"),"\xa0- ",(0,o.kt)("a",{parentName:"li",href:"/next/Branching_CASE_IF_MULTI_#poly"},"a polymorphic form"),".\xa0The selection condition is that the parameters\xa0match the implementation\xa0",(0,o.kt)("a",{parentName:"li",href:"/next/CLASS_operator"},"signature"),". This type is the default type and need not be explicitly specified.")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/next/Branching_CASE_IF_MULTI_#exclusive"},"type of mutual exclusion"),"\xa0of an operator determines whether several conditions for the implementation of an abstract action can simultaneously be met with a certain set of parameters. The\xa0",(0,o.kt)("strong",{parentName:"p"},"EXCLUSIVE\xa0"),"type indicates that implementation conditions cannot be met simultaneously. The\xa0",(0,o.kt)("strong",{parentName:"p"},"OVERRIDE"),"\xa0type allows several simultaneously fulfilled conditions, while which implementation is ultimately selected is determined by the keywords\xa0",(0,o.kt)("strong",{parentName:"p"},"FIRST"),"\xa0and\xa0",(0,o.kt)("strong",{parentName:"p"},"LAST"),"."),(0,o.kt)("p",null,"When performing a\xa0",(0,o.kt)("strong",{parentName:"p"},"LIST"),"\xa0abstract action, all implementations are executed sequentially.**\xa0",(0,o.kt)("strong",{parentName:"p"},"The implementation order is determined by the keywords "),"FIRST",(0,o.kt)("strong",{parentName:"p"}," and "),"LAST**."),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("strong",{parentName:"p"},"ABSTRACT"),"\xa0operator cannot be used inside the ",(0,o.kt)("a",{parentName:"p",href:"/next/Operator_..._"},(0,o.kt)("strong",{parentName:"a"},"{...}")," operator"),"."),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"type")),(0,o.kt)("p",null,"Type of abstract action. It is specified by one of these keywords:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"CASE")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"MULTI")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LIST"))),(0,o.kt)("p",null,"The default value is ",(0,o.kt)("strong",{parentName:"p"},"MULTI"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"exclusionType")),(0,o.kt)("p",null,"Type of mutual exclusion. One of these keywords:\xa0",(0,o.kt)("strong",{parentName:"p"},"EXCLUSIVE"),"\xa0or\xa0",(0,o.kt)("strong",{parentName:"p"},"OVERRIDE"),". Unless explicitly specified, in a\xa0",(0,o.kt)("strong",{parentName:"p"},"MULTI"),"\xa0abstract action the default type of mutual exclusion is\xa0",(0,o.kt)("strong",{parentName:"p"},"EXCLUSIVE"),",\xa0and in a ",(0,o.kt)("strong",{parentName:"p"},"CASE")," action\xa0the default type is\xa0",(0,o.kt)("strong",{parentName:"p"},"OVERRIDE"),". For a ",(0,o.kt)("strong",{parentName:"p"},"LIST")," abstract action the type of mutual exclusion is not specified."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"FIRST")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"LAST")),(0,o.kt)("p",null,"Keywords. When the word\xa0",(0,o.kt)("strong",{parentName:"p"},"FIRST")," is specified, implementations will be added to the top of the implementations list; when ",(0,o.kt)("strong",{parentName:"p"},"LAST"),"\xa0is specified, implementations will be added to the end of the implementations list.\xa0Unless specified, the default is\xa0",(0,o.kt)("strong",{parentName:"p"},"FIRST")," (except ",(0,o.kt)("strong",{parentName:"p"},"LIST"),", where the default is ",(0,o.kt)("strong",{parentName:"p"},"LAST"),")"),(0,o.kt)("p",null,"For abstract actions such as ",(0,o.kt)("strong",{parentName:"p"},"CASE"),"\xa0and ",(0,o.kt)("strong",{parentName:"p"},"MULTI")," with the type of mutual exclusion ",(0,o.kt)("strong",{parentName:"p"},"OVERRIDE"),", specifying ",(0,o.kt)("strong",{parentName:"p"},"FIRST")," will mean that of the matching implementations, the last one added will be executed. For actions such as ",(0,o.kt)("strong",{parentName:"p"},"LIST"),", specifying ",(0,o.kt)("strong",{parentName:"p"},"FIRST"),"\xa0will mean that implementations will be executed in the reverse order of their addition.\xa0"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"CHECKED")),(0,o.kt)("p",null,"Keyword. If specified, the platform will automatically check\xa0that at least one implementation is defined for all descendants of the argument classes (or exactly one, if the conditions are mutually exclusive)."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"argClassName1, ..., argClassNameN")),(0,o.kt)("p",null,"List of class names of property arguments. Each name is defined by a ",(0,o.kt)("a",{parentName:"p",href:"/next/IDs#classid-broken"},"class ID"),"."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lsf"},"exportXls 'Export to Excel'  ABSTRACT CASE ( Order);         // In this case, ABSTRACT CASE OVERRIDE LAST is created\nexportXls (Order o) + WHEN name(currency(o)) == 'USD' THEN {\n    MESSAGE 'Export USD not implemented';\n}\n\nCLASS Task;\nrun 'Execute'  ABSTRACT ( Task);                           // ABSTRACT MULTI EXCLUSIVE\n\nCLASS Task1 : Task;\nname = DATA STRING[100] (Task);\nrun (Task1 t) + {\n    MESSAGE 'Run Task1 ' + name(t);\n}\n\n\nCLASS OrderDetail;\nprice = DATA NUMERIC[14,2] (OrderDetail);\n\nCLASS InvoiceDetail;\nprice = DATA NUMERIC[14,2] (InvoiceDetail);\nfill  ABSTRACT LIST ( OrderDetail, InvoiceDetail);   // ABSTRACT LIST LAST\n\nfill (OrderDetail od, InvoiceDetail id) + {\n    price(id) <- price(od);\n}\n")))}c.isMDXComponent=!0}}]);