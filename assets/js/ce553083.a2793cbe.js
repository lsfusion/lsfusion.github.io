"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[31415],{78730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(74848),s=n(28453);const a={title:"Previous value (PREV)"},i=void 0,o={id:"Previous_value_PREV",title:"Previous value (PREV)",description:"The previous value operator creates a property that returns the value of the specified property at the beginning of the session (that is, the current value in the database ignoring the session changes).",source:"@site/versioned_docs/version-v5/Previous_value_PREV.md",sourceDirName:".",slug:"/Previous_value_PREV",permalink:"/Previous_value_PREV",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v5/docs/en/Previous_value_PREV.md",tags:[],version:"v5",lastUpdatedAt:1709302895,formattedLastUpdatedAt:"Mar 1, 2024",frontMatter:{title:"Previous value (PREV)"},sidebar:"learn",previous:{title:"New session (NEWSESSION, NESTEDSESSION)",permalink:"/New_session_NEWSESSION_NESTEDSESSION"},next:{title:"Change operators (SET, CHANGED, ...)",permalink:"/Change_operators_SET_CHANGED_etc"}},l={},c=[{value:"Language",id:"language",level:3},{value:"Examples",id:"examples",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.em,{children:"previous value"})," operator creates a ",(0,r.jsx)(t.a,{href:"/Properties",children:"property"})," that returns the value of the specified property at the beginning of the session (that is, the current value in the database ignoring the session changes)."]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:["This operator is calculated differently inside the ",(0,r.jsx)(t.a,{href:"/Events#change",children:"event"})," handling: here it returns the value at the time of the previous occurrence of this event (or rather, at the time when all its handling were completed)."]})}),"\n",(0,r.jsx)(t.h3,{id:"language",children:"Language"}),"\n",(0,r.jsxs)(t.p,{children:["To declare a property that returns a previous value, use the ",(0,r.jsxs)(t.a,{href:"/PREV_operator",children:[(0,r.jsx)(t.code,{children:"PREV"})," operator"]}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lsf",children:"f = DATA INTEGER (A);\r\n// outputs all changes f(a) in the session one by one\r\nmessageFChanges  {\r\n    FOR CHANGED(f(A a)) DO\r\n        MESSAGE 'In this session f(a) changed from ' + PREV(f(a)) + ' TO ' + f(a);\r\n}\r\n\r\nCLASS Document;\r\ndate = DATA DATE (Document);\r\n\r\nCLASS Article;\r\nprice = DATA NUMERIC[14,2] (Document, Article);\r\n// write in the price of the document the last used price in the database\r\n// PREV is important to ignore the prices entered in this document\r\n// this is especially important if the last used price is materialized, then the platform can simply read this value from the table\r\nsetPrice  {\r\n    price(Document d, Article a) <- PREV((GROUP LAST price(d, a) ORDER date(d), d));\r\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);