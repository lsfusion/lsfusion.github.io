"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([["7127"],{10732:function(e,r,n){n.r(r),n.d(r,{default:()=>d,frontMatter:()=>o,metadata:()=>t,assets:()=>l,toc:()=>c,contentTitle:()=>i});var t=JSON.parse('{"id":"CONCAT_operator","title":"CONCAT operator","description":"The CONCAT operator creates a property that implements a string concatenation.","source":"@site/versioned_docs/version-v5/CONCAT_operator.md","sourceDirName":".","slug":"/CONCAT_operator","permalink":"/v5/CONCAT_operator","draft":false,"unlisted":false,"editUrl":"https://github.com/lsfusion/platform/edit/v5/docs/en/CONCAT_operator.md","tags":[],"version":"v5","lastUpdatedAt":1708525070000,"frontMatter":{"title":"CONCAT operator"},"sidebar":"learn","previous":{"title":"CASE operator","permalink":"/v5/CASE_operator"},"next":{"title":"DATA operator","permalink":"/v5/DATA_operator"}}'),s=n("85893"),a=n("50065");let o={title:"CONCAT operator"},i=void 0,l={},c=[{value:"Syntax",id:"syntax",level:3},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function p(e){let r={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"CONCAT"})," operator creates a ",(0,s.jsx)(r.a,{href:"/v5/Properties",children:"property"})," that implements a string ",(0,s.jsx)(r.a,{href:"/v5/String_operators_+_CONCAT_SUBSTRING",children:"concatenation"}),"."]}),"\n",(0,s.jsx)(r.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"CONCAT separatorString, concatExpr1, ..., concatExprN\n"})}),"\n",(0,s.jsx)(r.h3,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"CONCAT"})," operator creates a property that concatenates values using the ",(0,s.jsx)(r.code,{children:"separatorString"})," separator. Here, ",(0,s.jsx)(r.code,{children:"NULL"})," values are skipped and the separator is inserted only between non-",(0,s.jsx)(r.code,{children:"NULL"})," values."]}),"\n",(0,s.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"separatorString"})}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.a,{href:"/v5/Literals#strliteral",children:"string literal"})," to be used as a separator."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"concatExpr1, ..., concatExprN"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"/v5/Expression",children:"Expressions"})," whose values are to be concatenated."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lsf",children:"CLASS Person;\nfirstName = DATA STRING[100] (Person);\nmiddleName = DATA STRING[100] (Person);\nlastName = DATA STRING[100] (Person);\n\n// if some part of the name is not specified, then this part will be skipped along with a space\nfullName(Person p) = CONCAT ' ', firstName(p), middleName(p), lastName(p);     \n"})})]})}function d(e={}){let{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},50065:function(e,r,n){n.d(r,{Z:function(){return i},a:function(){return o}});var t=n(67294);let s={},a=t.createContext(s);function o(e){let r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);