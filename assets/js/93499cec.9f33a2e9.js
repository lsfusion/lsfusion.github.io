"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([["26924"],{13733:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>s,metadata:()=>o,assets:()=>l,toc:()=>c,contentTitle:()=>a});var o=JSON.parse('{"id":"Type_conversion","title":"Type conversion","description":"The type conversion operator creates a property that converts an object of one built-in class to an object of another built-in class. If type conversion is not possible, the property value will be NULL.","source":"@site/versioned_docs/version-v5/Type_conversion.md","sourceDirName":".","slug":"/Type_conversion","permalink":"/v5/Type_conversion","draft":false,"unlisted":false,"editUrl":"https://github.com/lsfusion/platform/edit/v5/docs/en/Type_conversion.md","tags":[],"version":"v5","lastUpdatedAt":1685108136000,"frontMatter":{"title":"Type conversion"},"sidebar":"learn","previous":{"title":"Structure operators (STRUCT, [])","permalink":"/v5/Structure_operators_STRUCT"},"next":{"title":"Class operators","permalink":"/v5/Class_operators"}}'),r=t("85893"),i=t("50065");let s={title:"Type conversion"},a=void 0,l={},c=[{value:"String and file types",id:"string-and-file-types",level:3},{value:"Language",id:"language",level:3},{value:"Examples",id:"examples",level:3}];function d(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"type conversion"})," operator creates a ",(0,r.jsx)(n.a,{href:"/v5/Properties",children:"property"})," that converts an object of one ",(0,r.jsx)(n.a,{href:"/v5/Built-in_classes",children:"built-in class"})," to an object of another built-in class. If type conversion is not possible, the property value will be ",(0,r.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"string-and-file-types",children:"String and file types"}),"\n",(0,r.jsxs)(n.p,{children:["String types can be converted to human-readable file types (",(0,r.jsx)(n.code,{children:"CSVFILE"}),", ",(0,r.jsx)(n.code,{children:"XMLFILE"}),", ",(0,r.jsx)(n.code,{children:"JSONFILE"}),", ",(0,r.jsx)(n.code,{children:"HTMLFILE"}),", etc.), and vice versa - human-readable file types can be converted to string types."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Converting dynamic-type files (",(0,r.jsx)(n.code,{children:"FILE"}),") to strings and vice versa is prohibited in the current implementation, but if necessary this can be done via an intermediate human-readable type - for example, by first converting to ",(0,r.jsx)(n.code,{children:"CSVFILE"}),", and only then to ",(0,r.jsx)(n.code,{children:"FILE"})," (the resulting file ",(0,r.jsx)(n.a,{href:"/v5/Built-in_classes#extension",children:"will have the extension"})," CSV)"]})}),"\n",(0,r.jsx)(n.h3,{id:"language",children:"Language"}),"\n",(0,r.jsxs)(n.p,{children:["To implement conversion, the ",(0,r.jsx)(n.a,{href:"/v5/Type_conversion_operator",children:"type conversion operator"})," is used."]}),"\n",(0,r.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lsf",children:"itemCount = DATA INTEGER (Store);\nitemCountToString(s) = BPSTRING[10](itemCount(s));\n\nbarcode = DATA STRING[15] (Item);\nlongBarcode(Item i) = LONG(barcode(i));\n"})})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return s}});var o=t(67294);let r={},i=o.createContext(r);function s(e){let n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);