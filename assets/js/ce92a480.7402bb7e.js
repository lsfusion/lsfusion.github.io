"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[79813],{17300:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var s=t(74848),n=t(28453);const i={title:"Expression"},o=void 0,a={id:"Expression",title:"Expression",description:"An expression is a combination of property operators and parameters. When an expression is evaluated sequentially in priority order, all the operators are executed.",source:"@site/versioned_docs/version-v4/Expression.md",sourceDirName:".",slug:"/Expression",permalink:"/v4/Expression",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v4/docs/en/Expression.md",tags:[],version:"v4",lastUpdatedAt:1640850738,formattedLastUpdatedAt:"Dec 30, 2021",frontMatter:{title:"Expression"},sidebar:"learn",previous:{title:"= statement",permalink:"/v4/=_statement"},next:{title:"Operator priority",permalink:"/v4/Operator_priority"}},d={},p=[{value:"Examples",id:"examples",level:3}];function l(e){const r={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["An ",(0,s.jsx)(r.em,{children:"expression"})," is a combination of ",(0,s.jsx)(r.a,{href:"/v4/Property_operators",children:"property operators"})," and ",(0,s.jsx)(r.a,{href:"/v4/Properties",children:"parameters"}),". When an expression is evaluated sequentially in ",(0,s.jsx)(r.a,{href:"/v4/Operator_priority",children:"priority"})," order, all the operators are executed."]}),"\n",(0,s.jsxs)(r.p,{children:["The result of that execution will be either a ",(0,s.jsx)(r.a,{href:"/v4/Properties",children:"property"})," or a parameter (in the case of single-parameter expression). Their value shall be called the ",(0,s.jsx)(r.em,{children:"value"})," of the expression."]}),"\n",(0,s.jsx)(r.p,{children:"An expression can be described by the following set of recursive rules:"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Rule"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"expression"})," := ",(0,s.jsx)(r.code,{children:"parameter"})," | ",(0,s.jsx)(r.code,{children:"constant"})," | ",(0,s.jsx)(r.code,{children:"prefixOperator"})]}),(0,s.jsxs)(r.td,{children:["A single parameter, ",(0,s.jsx)(r.a,{href:"/v4/Constant",children:"constant"}),", or non-arithmetic prefix operator"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"expression"})," := ",(0,s.jsx)(r.code,{children:"prefixArithmOp expression"})]}),(0,s.jsx)(r.td,{children:"A unary arithmetic prefix operator, with the expression passed to it as an operand"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"expression"})," := ",(0,s.jsx)(r.code,{children:"expression postfixOp"})]}),(0,s.jsx)(r.td,{children:"A unary postfix operator, with the expression passed to it as an operand"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"expression"})," := ",(0,s.jsx)(r.code,{children:"expression binaryOp expression"})]}),(0,s.jsx)(r.td,{children:"A binary operator with the expressions passed to it as operands"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"expression"})," := ",(0,s.jsx)(r.code,{children:"( expression )"})]}),(0,s.jsx)(r.td,{children:"Expression in parentheses"})]})]})]}),"\n",(0,s.jsxs)(r.p,{children:["An expression cannot include ",(0,s.jsx)(r.a,{href:"/v4/Property_operators#contextindependent",children:"context-independent"})," property operators."]}),"\n",(0,s.jsx)(r.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lsf",children:"CLASS Team;\r\n\r\nwins(team) = DATA INTEGER(Team);\r\nties(team) = DATA INTEGER(Team);\r\n\r\n// The number of points received by the team for the matches played\r\npoints(Team team) = wins(team) * 3 + ties(team); \r\n// In this case, the expression is written to the right of the equal sign. It defines a new property called points.\r\n// When calculating the expression, two JOIN operators are first executed: wins(team) and ties(team), substituting \r\n// the team parameter in the wins and ties properties. Then the multiplication operator will be executed, \r\n// which will build a property that returns a number equal to the product of the return value of wins(team) \r\n// and the number 3. Then the addition operator will be executed, which will create a property that sums the return\r\n// values (wins(team) * 3) and ties(team). The resulting property will be the result of the expression.\r\n\r\nCLASS Game;\r\nCLASS BonusGame : Game;\r\n\r\n// The number of points per game. If the game is bonus, then 3, otherwise 2.\r\ngamePoints(Game game) = 2 (+) (1 IF game IS BonusGame); \r\n// In this example, the order of execution of the operators will be as follows: IS, IF, (+)\n"})})]})}function c(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>a});var s=t(96540);const n={},i=s.createContext(n);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);