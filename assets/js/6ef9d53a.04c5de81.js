"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[92554],{91139:(r,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>x,default:()=>a,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var t=s(74848),i=s(28453);const n={title:"Operator priority"},x=void 0,o={id:"Operator_priority",title:"Operator priority",description:"When evaluating an expression, operators are evaluated in a specific order depending on operator priority. The higher the operator\u2019s priority, the earlier it will be executed. The table below lists the priorities of all operators in descending order.",source:"@site/docs/Operator_priority.md",sourceDirName:".",slug:"/Operator_priority",permalink:"/next/Operator_priority",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/Operator_priority.md",tags:[],version:"current",lastUpdatedAt:1623249583,formattedLastUpdatedAt:"Jun 9, 2021",frontMatter:{title:"Operator priority"},sidebar:"learn",previous:{title:"Expression",permalink:"/next/Expression"},next:{title:"Property operators",permalink:"/next/Property_operators"}},d={},c=[];function h(r){const e={a:"a",code:"code",em:"em",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:["When evaluating an ",(0,t.jsx)(e.a,{href:"/next/Expression",children:"expression"}),", ",(0,t.jsx)(e.a,{href:"/next/Property_operators_paradigm",children:"operators"})," are evaluated in a specific order depending on ",(0,t.jsx)(e.em,{children:"operator priority"}),". The higher the operator\u2019s priority, the earlier it will be executed. The table below lists the priorities of all operators in descending order."]}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Operator"}),(0,t.jsx)(e.th,{children:"Description"}),(0,t.jsx)(e.th,{children:"Type"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"(expression)"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/JOIN_operator",children:(0,t.jsx)(e.code,{children:"JOIN"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/CASE_operator",children:(0,t.jsx)(e.code,{children:"CASE"})}),", ",(0,t.jsx)(e.a,{href:"/next/MULTI_operator",children:(0,t.jsx)(e.code,{children:"MULTI"})}),", ",(0,t.jsx)(e.a,{href:"/next/OVERRIDE_operator",children:(0,t.jsx)(e.code,{children:"OVERRIDE"})}),", ",(0,t.jsx)(e.a,{href:"/next/EXCLUSIVE_operator",children:(0,t.jsx)(e.code,{children:"EXCLUSIVE"})}),", ",(0,t.jsx)(e.a,{href:"/next/IF_..._THEN_operator",children:(0,t.jsx)(e.code,{children:"IF ... THEN"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/PARTITION_operator",children:(0,t.jsx)(e.code,{children:"PARTITION"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/RECURSION_operator",children:(0,t.jsx)(e.code,{children:"RECURSION"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/GROUP_operator",children:(0,t.jsx)(e.code,{children:"GROUP"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/STRUCT_operator",children:(0,t.jsx)(e.code,{children:"STRUCT"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/MAX_operator",children:(0,t.jsx)(e.code,{children:"MAX"})}),"/",(0,t.jsx)(e.a,{href:"/next/MIN_operator",children:(0,t.jsx)(e.code,{children:"MIN"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/CONCAT_operator",children:(0,t.jsx)(e.code,{children:"CONCAT"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.code,{children:"INTEGER"}),", ",(0,t.jsx)(e.code,{children:"DOUBLE"}),"...",(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/PREV_operator",children:(0,t.jsx)(e.code,{children:"PREV"})}),", ",(0,t.jsxs)(e.a,{href:"/next/Change_operators",children:[(0,t.jsx)(e.code,{children:"CHANGED"}),", ..."]}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Property_signature_CLASS",children:(0,t.jsx)(e.code,{children:"CLASS"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/ACTIVE_TAB_operator",children:(0,t.jsx)(e.code,{children:"ACTIVE"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Literals",children:(0,t.jsx)(e.code,{children:"literal"})})]}),(0,t.jsxs)(e.td,{children:["Expression in parentheses",(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Composition_JOIN",children:"Composition"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Selection_CASE_IF_MULTI_OVERRIDE_EXCLUSIVE",children:"Selection"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Partitioning_sorting_PARTITION_..._ORDER",children:"Partition/order"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Recursion_RECURSION",children:"Recursion"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Grouping_GROUP",children:"Group"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Structure_operators_STRUCT",children:"Structure creation"}),(0,t.jsx)("br",{}),"Maximum/minimum",(0,t.jsx)("br",{}),"String concatenation",(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Type_conversion",children:"Type conversion"}),(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Property_signature_CLASS",children:"Property signature"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Activity_ACTIVE",children:"Activity"}),(0,t.jsx)("br",{})," ",(0,t.jsx)(e.a,{href:"/next/Constant",children:"Constants"})]}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),"Prefix",(0,t.jsx)("br",{}),(0,t.jsx)("br",{})]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.a,{href:"/next/Brackets_operator",children:(0,t.jsx)(e.code,{children:"[ ]"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/IS_AS_operators",children:(0,t.jsx)(e.code,{children:"IS"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/IS_AS_operators",children:(0,t.jsx)(e.code,{children:"AS"})})]}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.a,{href:"/next/Structure_operators_STRUCT",children:"Structure element access"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Classification_IS_AS",children:"Classification"}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Classification_IS_AS",children:"Classification"})]}),(0,t.jsxs)(e.td,{children:["Postfix",(0,t.jsx)("br",{}),"Postfix",(0,t.jsx)("br",{}),"Postfix"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/Arithmetic_operators",children:(0,t.jsx)(e.code,{children:"-"})})}),(0,t.jsx)(e.td,{children:"Unary minus"}),(0,t.jsx)(e.td,{children:"Prefix"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.a,{href:"/next/Arithmetic_operators",children:(0,t.jsx)(e.code,{children:"*"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Arithmetic_operators",children:(0,t.jsx)(e.code,{children:"/"})})]}),(0,t.jsxs)(e.td,{children:["Multiplication",(0,t.jsx)("br",{}),"Division"]}),(0,t.jsxs)(e.td,{children:["Binary",(0,t.jsx)("br",{}),"Binary"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.a,{href:"/next/Arithmetic_operators",children:(0,t.jsx)(e.code,{children:"+"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Arithmetic_operators",children:(0,t.jsx)(e.code,{children:"-"})})]}),(0,t.jsxs)(e.td,{children:["Addition",(0,t.jsx)("br",{}),"Subtraction"]}),(0,t.jsxs)(e.td,{children:["Binary",(0,t.jsx)("br",{}),"Binary"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.a,{href:"/next/Arithmetic_operators",children:(0,t.jsx)(e.code,{children:"(+)"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Arithmetic_operators",children:(0,t.jsx)(e.code,{children:"(-)"})})]}),(0,t.jsxs)(e.td,{children:["Addition with ",(0,t.jsx)(e.code,{children:"NULL"})," values",(0,t.jsx)("br",{}),"Subtraction with ",(0,t.jsx)(e.code,{children:"NULL"})," values"]}),(0,t.jsxs)(e.td,{children:["Binary",(0,t.jsx)("br",{}),"Binary"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.a,{href:"/next/Comparison_operators",children:(0,t.jsx)(e.code,{children:"<"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Comparison_operators",children:(0,t.jsx)(e.code,{children:"<="})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Comparison_operators",children:(0,t.jsx)(e.code,{children:">"})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Comparison_operators",children:(0,t.jsx)(e.code,{children:">="})})]}),(0,t.jsxs)(e.td,{children:["Less",(0,t.jsx)("br",{}),"Less or equal",(0,t.jsx)("br",{}),"Greater",(0,t.jsx)("br",{}),"Greater or equal"]}),(0,t.jsxs)(e.td,{children:["Binary",(0,t.jsx)("br",{}),"Binary",(0,t.jsx)("br",{}),"Binary",(0,t.jsx)("br",{}),"Binary"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.a,{href:"/next/Comparison_operators",children:(0,t.jsx)(e.code,{children:"=="})}),(0,t.jsx)("br",{}),(0,t.jsx)(e.a,{href:"/next/Comparison_operators",children:(0,t.jsx)(e.code,{children:"!="})})]}),(0,t.jsxs)(e.td,{children:["Equal",(0,t.jsx)("br",{}),"Not equal"]}),(0,t.jsxs)(e.td,{children:["Binary",(0,t.jsx)("br",{}),"Binary"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/AND_OR_NOT_XOR_operators",children:(0,t.jsx)(e.code,{children:"NOT"})})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/Logical_operators_AND_OR_NOT_XOR",children:"Logical negation"})}),(0,t.jsx)(e.td,{children:"Prefix"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/AND_OR_NOT_XOR_operators",children:(0,t.jsx)(e.code,{children:"AND"})})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/Logical_operators_AND_OR_NOT_XOR",children:"Logical AND"})}),(0,t.jsx)(e.td,{children:"Binary"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/AND_OR_NOT_XOR_operators",children:(0,t.jsx)(e.code,{children:"XOR"})})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/Logical_operators_AND_OR_NOT_XOR",children:"Logical exclusive OR"})}),(0,t.jsx)(e.td,{children:"Binary"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/AND_OR_NOT_XOR_operators",children:(0,t.jsx)(e.code,{children:"OR"})})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/Logical_operators_AND_OR_NOT_XOR",children:"Logical OR"})}),(0,t.jsx)(e.td,{children:"Binary"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"/next/IF_operator",children:(0,t.jsx)(e.code,{children:"IF"})})}),(0,t.jsx)(e.td,{children:"Condition"}),(0,t.jsx)(e.td,{children:"Binary"})]})]})]})]})}function a(r={}){const{wrapper:e}={...(0,i.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(h,{...r})}):h(r)}},28453:(r,e,s)=>{s.d(e,{R:()=>x,x:()=>o});var t=s(96540);const i={},n=t.createContext(i);function x(r){const e=t.useContext(n);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function o(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:x(r.components),t.createElement(n.Provider,{value:e},r.children)}}}]);