"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[35569],{39768:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(74848),o=t(28453);const i={title:"MESSAGE operator"},r=void 0,a={id:"MESSAGE_operator",title:"MESSAGE operator",description:"The MESSAGE operator creates an action that shows the user a message.",source:"@site/docs/MESSAGE_operator.md",sourceDirName:".",slug:"/MESSAGE_operator",permalink:"/next/MESSAGE_operator",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/master/docs/en/MESSAGE_operator.md",tags:[],version:"current",lastUpdatedAt:1713986942,formattedLastUpdatedAt:"Apr 24, 2024",frontMatter:{title:"MESSAGE operator"},sidebar:"learn",previous:{title:"INPUT operator",permalink:"/next/INPUT_operator"},next:{title:"MULTI operator",permalink:"/next/MULTI_action_operator"}},c={},d=[{value:"Syntax",id:"syntax",level:3},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MESSAGE"})," operator creates an ",(0,s.jsx)(n.a,{href:"/next/Actions",children:"action"})," that shows the user a ",(0,s.jsx)(n.a,{href:"/next/Show_message_MESSAGE_ASK",children:"message"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MESSAGE expression options\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Operator options ",(0,s.jsx)(n.code,{children:"options"})," can be listed one after another in any order. The following set of options is supported:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"syncType\nLOG\n"})}),"\n",(0,s.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MESSAGE"})," operator creates an action that shows a message to the user either as a dialogue box with a text message or in the ",(0,s.jsxs)(n.a,{href:"/next/Navigator_design#systemwindows",children:["system window ",(0,s.jsx)(n.code,{children:"System.log"})]}),". The text message can be represented either by a string constant or by another more complex ",(0,s.jsx)(n.a,{href:"/next/Expression",children:"expression"})," whose value is a string or a value that can be converted to a string."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"expression"})}),"\n",(0,s.jsx)(n.p,{children:"An expression which value is the message text."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"syncType"})}),"\n",(0,s.jsx)(n.p,{children:"Synchronisation type. Specifies when the execution of the created action completes. Specified by one of the keywords:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"WAIT"})," - after the end of the message showing (in the case of displaying a dialog box with a message - after the window is closed). This value is used by default."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"NOWAIT"})," - right after the information is ready for sending to the user (the message text is read). If several ",(0,s.jsx)(n.code,{children:"MESSAGE"})," ",(0,s.jsx)(n.code,{children:"NOWAIT"})," actions are called during the execution of some continuous action, they do not create separate messages but are concatenated with the previous messages of the same type. A single concatenated message will be shown to the user at the end of the continuous action as a result."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"LOG"})}),"\n",(0,s.jsxs)(n.p,{children:["A keyword that, when specified, shows the message in the ",(0,s.jsx)(n.code,{children:"System.log"})," window."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lsf",children:"message { MESSAGE 'Hello World!'; } // plain text message\n\nisGood = DATA BOOLEAN (Item);\nstringData(Item i) {\n    // depending on which item will be passed to the action, a window will be shown either \n    // with the text 'Good' or with the text 'Bad'\n    MESSAGE IF isGood(i) THEN 'Good' ELSE 'Bad';   \n}\n\n// In this case, five text messages will be shown to the user\n// and the third one will be additionally written to the log\ntestMessage() {\n    LOCAL i = INTEGER();\n    i() <- 0;\n    WHILE i() < 5 DO {\n        i() <- i() + 1;\n        MESSAGE i();\n        IF i() == 3 THEN {\n            MESSAGE i() LOG;\n        }\n    }\n}\n\n// In the case of NOWAIT, one text message combining messages\n// from five MESSAGE calls will be shown to the user\ntestMessageNowait() {              \n    LOCAL i = INTEGER();\n    i() <- 0;\n    WHILE i() < 5 DO {\n        i() <- i() + 1;\n        MESSAGE i() NOWAIT;\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);