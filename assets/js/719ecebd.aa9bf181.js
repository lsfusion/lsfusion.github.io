"use strict";(self.webpackChunkls_fusion_docs=self.webpackChunkls_fusion_docs||[]).push([[86603],{39219:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=r(74848),s=r(28453);const i={title:"LIKE operator"},o=void 0,a={id:"LIKE_operator",title:"LIKE operator",description:"The LIKE operator is the creation of a property that implements the operation of comparing a string with a pattern.",source:"@site/versioned_docs/version-v5/LIKE_operator.md",sourceDirName:".",slug:"/LIKE_operator",permalink:"/LIKE_operator",draft:!1,unlisted:!1,editUrl:"https://github.com/lsfusion/platform/edit/v5/docs/en/LIKE_operator.md",tags:[],version:"v5",lastUpdatedAt:171321898e4,frontMatter:{title:"LIKE operator"},sidebar:"learn",previous:{title:"JOIN operator",permalink:"/JOIN_operator"},next:{title:"MAX operator",permalink:"/MAX_operator"}},c={},l=[{value:"Syntax",id:"syntax",level:3},{value:"Description",id:"description",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3}];function h(e){const t={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"LIKE"})," operator is the creation of a ",(0,n.jsx)(t.a,{href:"/Properties",children:"property"})," that implements the operation of ",(0,n.jsx)(t.a,{href:"/Comparison_operators_=_etc",children:"comparing a string with a pattern"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"syntax",children:"Syntax"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"stringExpr LIKE patternExpr\n"})}),"\n",(0,n.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"LIKE"})," operator creates a property that returns ",(0,n.jsx)(t.code,{children:"TRUE"})," if the specified string matches the given pattern. The pattern can include the following wildcard characters:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"%"})," (percent sign) - replaces any number of characters, including zero characters. This wildcard is used when the exact content or number of characters in a part of the string is unknown."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"_"})," (underscore) - replaces exactly one character. It is used when the exact location of a single character is required, but the character itself can be anything."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["To include the ",(0,n.jsx)(t.code,{children:"%"})," or ",(0,n.jsx)(t.code,{children:"_"})," characters in the pattern as regular characters, they must be escaped using the backslash ",(0,n.jsx)(t.code,{children:"\\"})," character. Remember, when specifying the pattern using a ",(0,n.jsx)(t.a,{href:"/Literals",children:"string literal"}),", to represent the backslash itself, it needs to be doubled: ",(0,n.jsx)(t.code,{children:"\\\\"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"stringExpr"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"/Expression",children:"Expression"})," whose value determines the string being compared. The value of the expression must belong to one of the ",(0,n.jsx)(t.a,{href:"/Built-in_classes",children:"string classes"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"patternExpr"})}),"\n",(0,n.jsx)(t.p,{children:"Expression whose value determines the pattern. The value of the expression must belong to one of the string classes."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-lsf",children:"isReportDocument(Document doc) = name(doc) LIKE '%report%'; // checks if the name contains the word 'report'\nisPhoneNumber(STRING str) = str LIKE '(___) ___-____'; // checks if the phone number matches the format\n\nstartsWith(STRING str, STRING prefix) = str LIKE prefix + '%'; // checks the beginning of the string\ncontains(STRING content, STRING str) = content LIKE '%' + str + '%'; // checks if the string contains the substring\ncontainsNew(STRING content, STRING str) = content LIKE '%${str}%'; // same as above, but with string interpolation\n\nescapingExample(STRING str) = str LIKE '__\\\\%'; // Escaping example. Checks for a two-digit percentage.\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(96540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);